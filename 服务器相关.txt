++++Centos下搭建FTP上传下载服务器++++
1、首先判断你服务器上是否安装了vsftpd
rpm -q vsftpd
2、安装完成之后就要重启vsftpd服务
service vsftpd restart
3、到vsftpd的主配置文件里面
vi /etc/vsftpd/vsftpd.conf
anonymous_enable=NO
把这个改为NO 默认是YES （改为NO 就是禁止匿名用户登录，不需要注释）
不可以让ftp用户跳出自己的家目录，否则太危险了。需要做限制
chroot_local_user=YES
默认是注释掉的，把#号去掉  然后重启vsftpd
4、创建ftp用户
useradd -s /sbin/nologin -d /var/www/XXXX(指定文件名） admin（自定义用户名）
（admin这个用户智能连接ftp无法登录系统，默认家目录在/var/www/XXXX  文件夹下面）
5、给admin这个用户设置密码
passwd admin
6、然后给家目录文件修改权限，否则你无法你无法上传文件
chmod o+w /var/www/XXXX
7、然后修改selinux
（查看selinux状态：/usr/sbin/sestatus -v 或 getenforce）
修改文件/etc/selinux/config  文件
将SELINUX=enforcing改为SELINUX=disabled
重启机器即可
8、重启vsftpd服务，并且下次自动启动
service vsftpd restart
9、关闭防火墙
service iptables stop



++++服务器维护中常用dos命令+++++
1.ping命令
用法：ping+空格+域名
作用：ping命令可以用来检查网络是否通畅、域名解析是正否正确以及是否丢包等等，而在服务器维护
中ping命令是第一个必须掌握的DOS命令。
2.telnet命令
用法：telnet+空格+域名+端口号 （默认情况IIS的端口号是80,Apache的端口号是8080）
作用：测试服务器端口是否连通。
3.tracert命令(路由跟踪)
用法：tracert+空格+域名
作用：网络是一个节点连接一个节点，而每个节点都有路由，通过tracert命令可以知道自己家到服务器
所在机房有多少节点，以及知道每个节点是否通畅。（一般情况节点越少，服务器打开越快）


+++++Linux系统查看和修改IP的方法++++++
1.显示当前启动的网络接口命令:
ifconfig
2.查看当前所有网络接口命令:
ifconfig -a
3.查看指定网络接口命令:
ifconfig eth0
在LINUX下修改IP分为二种情况
1.调试时修改IP,仅在当前生效,重启后恢复为原有IP
ifconfig eth0 192.168.63.27 netmask 255.255.255.0 route add default gw 192.168.63.1 up
2.永久生效(即重启后也能生效)
方法1:配置网卡的配置文件 
修改/etc/sysconfig/network-scripts/ifcfg-eth0
然后重启服务service network restart生效,或者/etc/init.d/network restart生效
方法2:
将ifconfig eth0 192.168.63.27 netmask 255.255.255.0 route add default gw 192.168.63.1 保存在/etc/init.d/rc.local文件中

数据库注意事项
mysql_free_result($result);关闭结果集
mysql_close($link);关闭与数据库的连接


+++++ab工具检测apache服务器性能+++++
cmd切入到ab.exe目录下，ab -n 5000 -c 247 http://localhost/test.php     //模拟5000次访问量，247同时在线（并发）
-t测试进行总时间，单位是秒，默认50000s，-p post时的数据文件，-w以HTML表的格式输出结果



+++并行技术++++
共享内存：所有CPU共内存，所有CPU由一个操作系统控制的，例如Windows和Linux/UNIX，目前流行的多核、多CPU机器都是属于这种；

消息驱动：其实就是分布式内存，CPU由不同的操作系统控制，不同的CPU之间通过网络通信。例如网格Grid是通过因特网通信、集群Cluster是通过局域网通信、MPP是通过专有的高速网络通信。

通过上面的对比，聪明的读者估计很快就想到了这两种系统并行程序实现方式的差异：

共享内存：通过操作系统的多进程多线程来完成并行任务，通过进程间通信来完成协作；

消息驱动：通过多台机器来完成并行任务，通过消息来完成协作。(MPP物理上看是一台机器，逻辑上是多台机器)。

当然，由于消息驱动系统中每个处理单元都是一台独立的机器，对这台独立的机器本身当然也可以通过共享内存来实现并行处理。

 

嗯，非常不错，经过我们的层层分析和筛选，原来各种各样的看起来很吓人的并行系统，最终被我们归纳总结出两种并行实现技术：多进程多线程、多机协作。


++++http500错误++++
Internal Server Error 解决办法：
如果你想解决PHP程序中的文件权限设置错误，并且不造成网站发生500内部服务器错误。那么需要依循以下规则：
1.保证：文件夹权限要设置为755或者更低,文件权限要设置为644或者更低。
2.如果文件权限是644但是PHP程序功能还是不好用，提示文件权限不够，那么可以联系客服，让他们将安全模块禁用。

++常见状态码++++
 static $_status = array(
        // Success 2xx
        200 => 'OK',
        // Redirection 3xx
        301 => 'Moved Permanently',  //永久移除
        302 => 'Moved Temporarily ',  // 1.1 暂时移除
        // Client Error 4xx
        400 => 'Bad Request',  //请求无效
        403 => 'Forbidden',    //禁止访问
        404 => 'Not Found',     //没有找到
        // Server Error 5xx
        500 => 'Internal Server Error',   //网络文件权限错误
        503 => 'Service Unavailable',  //服务不可用,可能是一个网站的程序占资源太多或者发生太多的错误
    );



+++数据链路层的基本知识 ++++
数据链路层的作用：1、IP数据模块发送和接收IP数据报；2、为ARP模块发送ARP请求和接收ARP协议；3、为RARP发送RARP请求
和接受RARP应答。
数据链路层使用的信道主要有一下两种类型：
点对点信道：这种信道的通信方式是一对一的通信方式----------ppp协议
广播信道：这种信道使用一对多的广播通信方式，对于这种方式需要遵循专用的共享信道协议来协调主机数据的发送；
链路：即使从一个结点到相邻结点的一段物理线路。而中间没有任何其他的交换结点。又称 为：物理链路
数据链路：因为当需要在一条线路上传递数据时，除了必须使用一条物理设备时，还需要一些必要的通信协议来控制数据
的传输，若把实现这些协议的硬件和软件的加到链路上，就叫做数据链路；最常用的是-----网络适配器。一般适配器都
包含了数据链路层和物理层这两层的功能----又称为逻辑链路。

+++TCP粘包和拆包问题+++++
问题产生
一个完整的业务可能会被TCP拆分成多个包进行发送，也有可能把多个小的包封装成一个大的数据包发送，这个就是TCP的拆包和封包问题。
下面可以看一张图，是客户端向服务端发送包：
1. 第一种情况，Data1和Data2都分开发送到了Server端，没有产生粘包和拆包的情况。
2. 第二种情况，Data1和Data2数据粘在了一起，打成了一个大的包发送到Server端，这个情况就是粘包。
3. 第三种情况，Data2被分离成Data2_1和Data2_2，并且Data2_1在Data1之前到达了服务端，这种情况就产生了拆包。
由于网络的复杂性，可能数据会被分离成N多个复杂的拆包/粘包的情况，所以在做TCP服务器的时候就需要首先解决拆包/粘包的问题。

TCP粘包和拆包产生的原因
1. 应用程序写入数据的字节大小大于套接字发送缓冲区的大小
2. 进行MSS大小的TCP分段。MSS是最大报文段长度的缩写。MSS是TCP报文段中的数据字段的最大长度。数据字段加上TCP首部才等于整个的TCP报文段。所以MSS并不是TCP报文段的最大长度，而是：MSS=TCP报文段长度-TCP首部长度
3. 以太网的payload大于MTU进行IP分片。MTU指：一种通信协议的某一层上面所能通过的最大数据包大小。如果IP层有一个数据包要传，而且数据的长度比链路层的MTU大，那么IP层就会进行分片，把数据包分成托干片，让每一片都不超过MTU。注意，IP分片可以发生在原始发送端主机上，也可以发生在中间路由器上。

TCP粘包和拆包的解决策略
1. 消息定长。例如100字节。
2. 在包尾部增加回车或者空格符等特殊字符进行分割，典型的如FTP协议
3. 将消息分为消息头和消息尾。
4. 其它复杂的协议，如RTMP协议等。
