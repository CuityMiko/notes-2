++++++网站全页变灰css代码++++++++++
html{   
    filter: grayscale(100%);    
    -webkit-filter: grayscale(100%);    
    -moz-filter: grayscale(100%);   
    -ms-filter: grayscale(100%);    
    -o-filter: grayscale(100%); 
    filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale");  
    filter:progid:DXImageTransform.Microsoft.BasicImage(grayscale=1);   -webkit-filter: grayscale(1);
}
将上述代码放入head中的style即可。


这篇日志主要是写  javascript、DOM 的一些 属性 和 方法 。
DOM
document.createElement(li);   创建一个元素
document.createTextNode();    创建一个文本
.appendChild();   在父DOM里面插入一个子节点
.insertBefore(子节点，在谁之前)
removeChild()    删除子元素
cloneNode      复制节点
replaceChild    替换节点
hasChildNodes   判断给定元素节点是否有子元素
parentNode     上级元素节点
childNodes     子节点集合
nodeName   属性含有某个节点的名称。
nodeType    3 文本节点  1 元素节点
children     取元素
offsetParent    此元素的上级定位元素    
firstChild     第一个子节点    FF 下面 是  firstElementChild
lastChild     最后一个子节点   FF  下面是    lastElementChild
nextSibling    下面的兄弟元素  FF下面是   nextElementSibling
previousSibling   上面的兄弟元素   FF下面是     previousElementSibling
a.value ==  a['value']
nodeValue     元素内容
setAttribute(名称，值)    设置元素属性
getAttribute(名称)    获取元素属性
removeAttribute(名称)    删除元素属性
.style.proprtype   设置元素的css
className    改变元素的class 


js获取一个页面中的所有a元素和title元素，然后创造新的P元素，并把a的title和内容附加到p元素中。
<script type="text/javascript">  
window.onload = function(){  
 var mya = document.getElementsByTagName('a');  
 var tmp = Array();  
 for(var i = 0; i<mya.length; i++){  
    var mytit = mya[i].getAttribute('title');  
tmp[mytit] = mya[i].lastChild.nodeValue;  
 }  
 var myBody = document.getElementsByTagName('body')[0];  
 for (key in tmp){  
     var myP = document.createElement('p');  
myP.title = key;  
var myTxt = document.createTextNode(tmp[key]);  
myP.appendChild(myTxt);  
myBody.appendChild(myP);  
 }  
}  
</script>  

++++++++jquery中attr()使用++++++++
<script>                                  //用attr设置属性值
$("ul li:eq(1)").attr("title","不吃橘子");
alert($("ul li:eq(1)").attr("title"));
</script>
                                          //用attr删除属性值
<script>
$("ul li:eq(1)").removeAttr ("title");
</script>

++++需要掌握的前端,HTML,JS知识点++++++++
css盒模型。
javascript中的prototype。
javascript中this对象的作用域。
IE和firefox事件冒泡的不同。
什么是怪异模式,标准模式，近标准模式。
DTD的定义
IE/firefox常用hack.
firefox,IE下的前端js/css调试工具。

+++++手机触摸屏的JS事件++++++++
作者 管理员  发布时间 2013-06-13 17:38  文章分类 JavaScript  文章评论 1条评论  阅读次数 
处理Touch事件能让你跟踪用户的每一根手指的位置。你可以绑定以下四种Touch事件：
一、
touchstart:// 手指放到屏幕上的时候触发
touchmove:// 手指在屏幕上移动的时候触发
touchend:// 手指从屏幕上拿起的时候触发
touchcancel:// 系统取消touch事件的时候触发。至于系统什么时候会取消，不详
二、
client / clientY：// 触摸点相对于浏览器窗口viewport的位置
pageX / pageY：// 触摸点相对于页面的位置
screenX /screenY：// 触摸点相对于屏幕的位置
identifier：>// touch对象的unique ID


++++++js判断浏览器版本+++++
var Sys = {};
var ua = navigator.userAgent.toLowerCase();
if (window.ActiveXObject)
Sys.ie = ua.match(/msie ([\d.]+)/)[1]
else if (document.getBoxObjectFor)
Sys.firefox = ua.match(/firefox\/([\d.]+)/)[1]
else if (window.MessageEvent && !document.getBoxObjectFor)
Sys.chrome = ua.match(/chrome\/([\d.]+)/)[1]
else if (window.opera)
Sys.opera = ua.match(/opera.([\d.]+)/)[1]
else if (window.openDatabase)
Sys.safari = ua.match(/version\/([\d.]+)/)[1];
//以下进行测试
if(Sys.ie) document.write('IE: '+Sys.ie);
if(Sys.firefox) document.write('Firefox: '+Sys.firefox);
if(Sys.chrome) document.write('Chrome: '+Sys.chrome);
if(Sys.opera) document.write('Opera: '+Sys.opera);
if(Sys.safari) document.write('Safari: '+Sys.safari);
还可以写成下面这种：
var Sys = {};
var ua = navigator.userAgent.toLowerCase();
window.ActiveXObject ? Sys.ie = ua.match(/msie ([\d.]+)/)[1] :
document.getBoxObjectFor ? Sys.firefox = ua.match(/firefox\/([\d.]+)/)[1] :
window.MessageEvent && !document.getBoxObjectFor ? Sys.chrome = ua.match(/chrome\/([\d.]+)/)[1] :
window.opera ? Sys.opera = ua.match(/opera.([\d.]+)/)[1] :
window.openDatabase ? Sys.safari = ua.match(/version\/([\d.]+)/)[1] : 0;
//以下进行测试
if(Sys.ie) document.write('IE: '+Sys.ie);
if(Sys.firefox) document.write('Firefox: '+Sys.firefox);
if(Sys.chrome) document.write('Chrome: '+Sys.chrome);
if(Sys.opera) document.write('Opera: '+Sys.opera);
if(Sys.safari) document.write('Safari: '+Sys.safari);

JS各种弹窗效果：
http://www.web92.net/dom/2012-06-04-XY_Tips/

++++++对于input输入框+++++
readonly说明此域的值不可修改，只可与 type="text" 配合使用，可复制，
可选择,可接收焦点，后台会接收到传值。
<input type="text" name="www.xxx" readonly="readonly" />
disabled表示禁用input元素，不可编辑，不可复制，不可选择，
不能接收焦点,后台也不会接收到传值
<input type="text" name="www.xxx.com" disabled="disabled" />
最后介绍一个标签，浏览器通常会记录input输入框的记录，所以你在输入的时候，经常会下拉很多内容，
如果你想去掉的话，最好加上autocomplete="off"，使用方法如下：autocomplete="off"
<input type="text" autocomplete="off" id="number"/>



++++js在手机上的表现+++++
一、手机上的触摸事件
基本事件：
touchstart   //手指刚接触屏幕时触发
touchmove    //手指在屏幕上移动时触发
touchend     //手指从屏幕上移开时触发
下面这个比较少用：
touchcancel  //触摸过程被系统取消时触发
每个事件都有以下列表，比如touchend的targetTouches当然是 0 咯：
touches         //位于屏幕上的所有手指的列表
targetTouches   //位于该元素上的所有手指的列表
changedTouches  //涉及当前事件的所有手指的列表
每个事件有列表，每个列表还有以下属性：
复制代码
其中坐标常用pageX,pageY：
pageX    //相对于页面的 X 坐标
pageY    //相对于页面的 Y 坐标
clientX  //相对于视区的 X 坐标
clientY  //相对于视区的 Y 坐标
screenX  //相对于屏幕的 X 坐标
screenY  //相对于屏幕的 Y 坐标
identifier // 当前触摸点的惟一编号
target   //手指所触摸的 DOM 元素
复制代码
其他相关事件：
event.preventDefault（）   //阻止触摸时浏览器的缩放、滚动条滚动
var supportTouch = "createTouch" in document  //判断是否支持触摸事件
二、示例
以下是获取不同类型滑动的代码具体做法，结合前人的思想，封装好了，可以借鉴学习：
复制代码
var touchFunc = function(obj,type,func) {
    //滑动范围在5x5内则做点击处理，s是开始，e是结束
    var init = {x:5,y:5,sx:0,sy:0,ex:0,ey:0};
    var sTime = 0, eTime = 0;
    type = type.toLowerCase();
 
    obj.addEventListener("touchstart",function(){
        sTime = new Date().getTime();
        init.sx = event.targetTouches[0].pageX;
        init.sy = event.targetTouches[0].pageY;
        init.ex = init.sx;
        init.ey = init.sy;
        if(type.indexOf("start") != -1) func();
    }, false);
 
    obj.addEventListener("touchmove",function() {
        event.preventDefault();//阻止触摸时浏览器的缩放、滚动条滚动
        init.ex = event.targetTouches[0].pageX;
        init.ey = event.targetTouches[0].pageY;
        if(type.indexOf("move")!=-1) func();
    }, false);
 
    obj.addEventListener("touchend",function() {
        var changeX = init.sx - init.ex;
        var changeY = init.sy - init.ey;
        if(Math.abs(changeX)>Math.abs(changeY)&&Math.abs(changeY)>init.y) {
            //左右事件
            if(changeX > 0) {
                if(type.indexOf("left")!=-1) func();
            }else{
                if(type.indexOf("right")!=-1) func();
            }
        }
        else if(Math.abs(changeY)>Math.abs(changeX)&&Math.abs(changeX)>init.x){
            //上下事件
            if(changeY > 0) {
                if(type.indexOf("top")!=-1) func();
            }else{
                if(type.indexOf("down")!=-1) func();
            }
        }
        else if(Math.abs(changeX)<init.x && Math.abs(changeY)<init.y){
            eTime = new Date().getTime();
            //点击事件，此处根据时间差细分下
            if((eTime - sTime) > 300) {
                if(type.indexOf("long")!=-1) func(); //长按
            }
            else {
                if(type.indexOf("click")!=-1) func(); //当点击处理
            }
        }
        if(type.indexOf("end")!=-1) func();
    }, false);
};


++++++手机触摸屏的JS事件 +++++++
处理Touch事件能让你跟踪用户的每一根手指的位置。你可以绑定以下四种Touch事件：
    1.touchstart:  // 手指放到屏幕上的时候触发 
    2.touchmove:  // 手指在屏幕上移动的时候触发 
    3.touchend:  // 手指从屏幕上拿起的时候触发 
    4touchcancel:  // 系统取消touch事件的时候触发。至于系统什么时候会取消，不详
属性
    1.client / clientY：// 触摸点相对于浏览器窗口viewport的位置 
    2.pageX / pageY：// 触摸点相对于页面的位置 
    3.screenX /screenY：// 触摸点相对于屏幕的位置 
    4.identifier： // touch对象的unique ID 
//touchstart事件  
function touchSatrtFunc(e) {  
    //evt.preventDefault(); //阻止触摸时浏览器的缩放、滚动条滚动等  
    var touch = e.touches[0]; //获取第一个触点  
    var x = Number(touch.pageX); //页面触点X坐标  
    var y = Number(touch.pageY); //页面触点Y坐标  
    //记录触点初始位置  
    startX = x;  
    startY = y;  
}  
//touchmove事件 
function touchMoveFunc(e) {  
    //evt.preventDefault(); //阻止触摸时浏览器的缩放、滚动条滚动等  
    var touch = evt.touches[0]; //获取第一个触点  
    var x = Number(touch.pageX); //页面触点X坐标  
    var y = Number(touch.pageY); //页面触点Y坐标  
    var text = 'TouchMove事件触发：（' + x + ', ' + y + '）';  
    //判断滑动方向  
    if (x - startX != 0) {  
        //左右滑动  
    }  
    if (y - startY != 0) {  
        //上下滑动  
    }  
}  

++++++++Mobile Web前端开发系列:事件处理（二）++++++++  
上篇文章我们讲了html的基本事件，这篇文章我们着重讲解下触摸事件，触摸事件触发的条件是手指接触屏幕、手指在屏幕上移动或者从屏幕上离开。 事件是触摸的集合，它起始于手指初次放置在屏幕上，终止于最后一个手指离开屏幕。事件从开始到结束过程中的所有触摸操作都存储在相同事件的记录中。
touch事件
touch事件可以分为单点触摸和多点触摸两种，单点触摸高端机一般都支持，Safari2.0、Android3.0以上的版本支持多点触摸，支持最多5个手指同时触摸屏幕，ipad最多支持11个手指同时触摸屏幕， 我们可以采用以下的事件模型捕获这些事件，
ontouchstart ontouchmove ontouchend ontouchcancel
当用户按下手指在屏幕上，ontouchstart会被触发，当用户移动一个或多个手指的时候，ontouchmove会被触发，当用户移走手指， ontouchend被触发。那什么时候触发ontouchcancel呢？当一些更高级别的事件发生的时候，例如，alert，有电话打来或者有 推送的消息提示的时候会取消当前的touch操作，即触发ontouchcancel。当你在开发一个web game的时候，ontouchcancel 对你很重要，你可以在ontouchcancel触发的时候暂停游戏或者保存游戏。
gesture事件
gesture事件的运行原理与touch事件相同，只是gesture事件仅当屏幕上存在至少两个手指时触发，所以Safari2.0、Android3.0以上版本支持， 手势具备诸多优势，可以帮助我们测量两指放缩和旋转操作，事件模型如下，
ongesturestart ongesturechange ongestureend
事件属性
无论使用触摸还是手势事件，你都需要将这些事件转换为单独的触摸来使用它们。为此，你需要访问事件对象的一系列的属性。
targetTouches 目标元素的所有当前触摸 changedTouches 页面上最新更改的所有触摸 touches 页面上的所有触摸
changedTouches、targetTouches和touches分别包含稍微不同的触摸列表。targetTouches和touches分别包含当前位于 屏幕上的手指列表，但changedTouches仅列出最后发生的触摸。如果你在使用touchend或者gestureend事件，那么这个属性 非常重要。在这两种情况下，屏幕上都不会再出现手指，因此targetTouches和touches应该为空，但你仍然可以通过查看 changedTouches数组来了解最后发生的事情。
由于触摸属性都会生成数组，因此你可以使用JavaScript数组函数来访问它们。这意味着，event.touches[0]将返回第一次 触摸，并且可以使用event.touches.length来计算当前存储的触摸数量。
查看单独触摸时，通过使用event.targetTouches[0],你也可以访问其它触摸，每个触摸会包含一些具体信息，
clientX、clientY 相对于当前屏幕的X或Y位置 pageX、pageY 相对于整体页面的X或Y位置 screenX、screenY 相对于用户计算机屏幕的X或Y位置 identifier 事件的唯一标识符 target 生成触摸的目标对象
手势事件的事件对象会比普通触摸事件多两个属性，
rotation 手指的旋转角度 scale 放缩的值

underfined、null、0、false、NaN、空字符串的逻辑结果均为false。

从数组中随机获取成员
var items = [12, 548 , 'a' , 2 , 5478 , 'foo' , 8852, , 'Doe' , 2145 , 119];
var  randomItem = items[Math.floor(Math.random() * items.length)];

获取指定范围内的随机数
var x = Math.floor(Math.random() * (max - min + 1)) + min;

生成从0到指定值的数字数组
var numbersArray = [] , max = 100;
for( var i=1; numbersArray.push(i++) < max;);  // numbers = [1,2,3 ... 100]

生成随机的字母数字字符串
function generateRandomAlphaNum(len) {
    var rdmString = "";
    for( ; rdmString.length < len; rdmString  += Math.random().toString(36).substr(2));
    return  rdmString.substr(0, len);
}

打乱数字数组的顺序
var numbers = [5, 458 , 120 , -215 , 228 , 400 , 122205, -85411];
numbers = numbers.sort(function(){ return Math.random() - 0.5});
/* numbers 数组将类似于 [120, 5, 228, -215, 400, 458, -85411, 122205]  */


字符串去空格
Java、C#和PHP等语言都实现了专门的字符串去空格函数，但JavaScript中是没有的，
可以通过下面的代码来为String对象函数一个trim函数：
String.prototype.trim = function(){return this.replace(/^\s+|\s+$/g, "");};
新的JavaScript引擎已经有了trim()的原生实现。

数组之间追加
var array1 = [12 , "foo" , {name "Joe"} , -2458];
var array2 = ["Doe" , 555 , 100];
Array.prototype.push.apply(array1, array2);
/* array1 值为  [12 , "foo" , {name "Joe"} , -2458 , "Doe" , 555 , 100] */

对象转换为数组
var argArray = Array.prototype.slice.call(arguments);

验证是否是数组
function isArray(obj){
    return Object.prototype.toString.call(obj) === '[object Array]' ;
}
但如果toString()方法被重写过得话，就行不通了。也可以使用下面的方法：
Array.isArray(obj); // its a new Array method

获取数组中的最大值和最小值
var  numbers = [5, 458 , 120 , -215 , 228 , 400 , 122205, -85411]; 
var maxInNumbers = Math.max.apply(Math, numbers); 
var minInNumbers = Math.min.apply(Math, numbers);


清空数组
var myArray = [12 , 222 , 1000 ];  
myArray.length = 0; // myArray will be equal to [].

使用length属性截断数组
var myArray = [12 , 222 , 1000 , 124 , 98 , 10 ];  
myArray.length = 4; // myArray will be equal to [12 , 222 , 1000 , 124].
与此同时，如果把length属性变大，数组的长度值变会增加，会使用undefined来作为新的元素填充。length是一个可写的属性。
myArray.length = 10; // the new array length is 10 
myArray[myArray.length - 1] ; // undefined

使得map()函数方法对数据循环
var squares = [1,2,3,4].map(function (val) {  
    return val * val;  
}); 
// squares will be equal to [1, 4, 9, 16]

保留指定小数位数
var num =2.443242342;
num = num.toFixed(4);  // num will be equal to 2.4432
注意，toFixec()返回的是字符串，不是数字。

浮点计算的问题
0.1 + 0.2 === 0.3 // is false 
9007199254740992 + 1 // is equal to 9007199254740992
9007199254740992 + 2 // is equal to 9007199254740994
为什么呢？因为0.1+0.2等于0.30000000000000004。JavaScript的数字都遵循IEEE 754标准构建，
在内部都是64位浮点小数表示.
可以通过使用toFixed()和toPrecision()来解决这个问题。


通过for-in循环检查对象的属性
for (var name in object) {  
    if (object.hasOwnProperty(name)) { 
        // do something with name
    }  
}

逗号操作符
var a = 0; 
var b = ( a++, 99 ); 
console.log(a);  // a will be equal to 1 
console.log(b);  // b is equal to 99

提前检查传入isFinite()的参数
isFinite(0/0) ; // false
isFinite("foo"); // false
isFinite("10"); // true
isFinite(10);   // true
isFinite(undefined);  // false
isFinite();   // false
isFinite(null);  // true，这点当特别注意

用JSON来序列化与反序列化
var person = {name :'Saad', age : 26, department : {ID : 15, name : "R&D"} };
var stringFromPerson = JSON.stringify(person);
/* stringFromPerson 结果为 "{"name":"Saad","age":26,"department":{"ID":15,"name":"R&D"}}"   */
var personFromString = JSON.parse(stringFromPerson);
/* personFromString 的值与 person 对象相同  */

不要使用eval()或者函数构造器
eval()和函数构造器（Function consturctor）的开销较大，每次调用，JavaScript引擎都要将源代码转换为可执行的代码。
var func1 = new Function(functionCode);
var func2 = eval(functionCode);

不要对数组使用for-in
避免：
var sum = 0;  
for (var i in arrayNumbers) {  
    sum += arrayNumbers[i];  
}
而是：
var sum = 0;  
for (var i = 0, len = arrayNumbers.length; i < len; i++) {  
    sum += arrayNumbers[i];  
}


使用XMLHttpRequests时注意设置超时
XMLHttpRequests在执行时，当长时间没有响应（如出现网络问题等）时，应该中止掉连接，可以通过setTimeout()来完成这个工作：
var xhr = new XMLHttpRequest (); 
xhr.onreadystatechange = function () {  
    if (this.readyState == 4) {  
        clearTimeout(timeout);  
        // do something with response data 
    }  
}  
var timeout = setTimeout( function () {  
    xhr.abort(); // call error callback  
}, 60*1000 /* timeout after a minute */ ); 
xhr.open('GET', url, true);  
xhr.send();
同时需要注意的是，不要同时发起多个XMLHttpRequests请求。


++++++++javascript获取css样式++++++++
1.获取行间样式就不说了，基本就是obj.style.fontSize obj.style.left   obj.style.mozUserSelect等等
2、JavaScript获取行外部<style></style>里的样式
（1）firefox中用getComputedStyle()方法
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">  
<html xmlns="http://www.w3.org/1999/xhtml">  
<head>  
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />  
<title>JS获取行外部样式</title>  
<style type="text/css">  
    #body_div{  
        font-size:14px;  
        width:400px;  
        height:500px;  
    }  
</style>  
<script type="text/javascript">  
    function getStyle()  
    {  
        var div = document.getElementById("body_div");  
        var whole = document.defaultView.getComputedStyle(div,null);  
        alert(whole.fontSize);  
        alert(whole.width);  
        alert(whole.height);  
    }  
</script>  
</head>  
  
<body onload="getStyle();">  
   <div id="body_div" style="font-weight:bolder;">JS获取行外部样式</div>  
</body>  
</html>  
（2）IE浏览器用obj.currentStyle方法


列出display的值。
display:block;
display:compact;
display:inherit;
display:inline;
display:inline-block;
display:inline-table;
display:list-item;
display:marker;
display:none;
display:run-in;
display:table;
display:table-caption;
display:table-cell;
display:table-column;
display:table-column-group;
display:table-footer-group;
display:table-header-group;
display:table-row;
display:table-row-group;
display:!important;


+++++JavaScript字符串数值比较问题++++++
字符串比较是根据ASCII码，由于8的ASCII码比2的ASCII码大，导致出现了8.4大于21.3的情况。
解决办法
将字符串转换成数值
function compareData()  
    {  
        var data1 = document.getElementById("inval").value;  
        var data2 = document.getElementById("typev").value;  
        if(Number(data1) > Number(data2))  
        {  
            alert(data1+"大于"+data2);      
        }  
        else  
        {  
            alert(data1+"小于或等于"+data2);  
        }  
    }  


+++++++JavaScript替换字符串中最后一个字符+++++++
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">  
<html xmlns="http://www.w3.org/1999/xhtml">  
<head>  
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />  
<title>JavaScript替换字符串中最后一个字符</title>  
<script type="text/javascript">  
    function replaceStr()  
    {  
        var e = event || window.event || arguments.callee.caller.arguments[0];  
        var input_str = document.getElementById("input_str").value;  
        var newStr = input_str.substring(0,11);  
        if(e && e.keyCode>=48 && e.keyCode <= 57)  
        {   
            newStr += (e.keyCode-48);     
        }  
        document.getElementById("input_str").value = newStr;  
    }  
</script>  
</head>  
  
<body>  
    <input type="text" id="input_str" maxlength="12" onkeyup="replaceStr();"/>  
</body>  
</html>  



+++++++JS显示标准时间格式+++++++
利用常规方法，直接拼接日期时间：
var dayTime = $("#endTime").val();  
        var dtime = new Date(dayTime);  
        dtime.setTime(dtime.getTime()+365*100);  
        var date = new Date(dtime.getTime());  
        var year = date.getFullYear();  
        var month = date.getMonth()+1;  
        var day = date.getDate();  
        var hour = date.getHours();  
        var minute = date.getMinutes();  
        var second = date.getSeconds();  
        var date1 = year+"-"+(month<10?"0"+month:month)+"-"+(day<10?"0"+day:day)+" "+(hour<10?"0"+hour:hour)+":"+(minute<10?"0"+minute:minute)+":"+(second<10?"0"+second:second);  
        $("#endDate").val(date1);  


++++++JavaScript常用对象有哪些++++++
1、String
2、Date
3、Math
4、Array
5、Number
6、Boolean

++++++form表单中的input有哪些类型++++++
1、button
    <input type="button"/>
2、checkbox
     <input type="checkbox"/>
3、file
     <input type="file"/>
4、hidden
    <input type="hidden"/>
5、image
    <input type="image"/>
6、password
    <input type="password"/>
7、radio
    <input type="radio"/>
8、reset
    <input type="reset"/>
9、submit
     <input type="submit"/>
10、text
      <input type="text"/>

++++++JavaScript禁止浏览器默认行为++++++
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">  
<html xmlns="http://www.w3.org/1999/xhtml">  
<head>  
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />  
<title>JavaScript禁止浏览器默认行为</title>  
<script type="text/javascript">  
     function linkClick()  
     {  
         var divTag = document.getElementById("atag");  
         divTag.onclick = function(e){  
             if(e.preventDefault)  
             {  
                 e.preventDefault();  
             }  
             else  
             {  
                 window.event.returnValue == false;   //（IE浏览器）
             }  
         }  
     }  
</script>  
  
</head>  
  
<body>  
   <div id="div_atag">  
       <a href="http://www.baidu.com" id="atag">百度</a>  
   </div>  
</body>  
</html>  


+++++如何利用JavaScript遍历JSON数组+++++
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">  
<html xmlns="http://www.w3.org/1999/xhtml">  
<head>  
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />  
<title>利用JavaScript遍历JSON数组</title>  
<script type="text/javascript">  
     function traJsonArray()  
     {  
         var jsonArray = [{"id":"100","name":"zhangsan","age":"23","sex":"man"},{"id":"101","name":"lisi","age":"21","sex":"woman"},{"id":"102","name":"wangwu","age":"22","sex":"man"}];  
         var inputText = "";  
         for(var json in jsonArray)  
         {  
             for(var key in jsonArray[json])  
             {  
                inputText += jsonArray[json][key]+",";   
             }  
         }  
           
         document.getElementById("areaText").innerText = inputText;  
     }  
</script>  
</head>  
  
<body>  
   <div>  
      <input type="button" id="btn" onclick="traJsonArray()" value="利用JavaScript遍历JSON数组"/>  
      <textarea id="areaText" cols="80" rows="30"></textarea>  
   </div>  
</body>  
</html>  


++++++JavaScript控制输入框中只能输入中文、数字和英文++++++
  function  checkUsername()
  {
        //正则表达式
        var reg = new RegExp("^[a-zA-Z\d\u4E00-\u9FA5]+$");
        //获取输入框中的值
        var username = document.getElementById("username").value.trim();
        //判断输入框中有内容
       if(username.length >0)
       {
              alert("请输入中文、数字和英文！");
              //输入非法字符，清空输入框
              $("#username").val("");
       }
  }

++++JavaScript向select下拉框中添加和删除元素++++++
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">  
<html xmlns="http://www.w3.org/1999/xhtml">  
<head>  
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />  
<title>JavaScript向select下拉框中添加和删除元素</title>  
<script type="text/javascript" src="jquery-1.11.1.js"></script>  
<script type="text/javascript">  
      /**  
       * 向select下拉框中添加子元素  
       */  
     function addElement()  
     {      
         //保证不重复添加  
         $("#select_div").empty();  
         //添加子元素  
         $("#select_div").append("<option value='0'>---请选择---</option><option value='1'>男</option><option value='2'>女</option>");  
     }  
       
     /**  
      * 删除下拉框中最后一个元素  
      */  
     function removeLast()  
     {  
         //删除最后一个子元素  
         $("#select_div option:last").remove();  
     }  
</script>  
</head>  
  
<body>  
</body>  
    <div id="select_span">  
         <select id="select_div" style="width:145px;">  
               
         </select>  
    </div>  
    <input type="button" value="添加元素" onclick="addElement()"/>  
    <input type="button" value="删除元素" onclick="removeLast()"/>  
</html> 


++++++++JavaScript获取某年某月的最后一天++++++++
<!DOCTYPE html>  
<!--  
To change this license header, choose License Headers in Project Properties.  
To change this template file, choose Tools | Templates  
and open the template in the editor.  
-->  
<html>  
    <head>  
        <title>JavaScript获取某年某月的最后一天</title>  
        <meta charset="UTF-8">  
        <meta name="viewport" content="width=device-width">  
        <script type="text/javascript">  
              /**  
               * 获取某年某月的最后一天  
               */  
              function getLastDayOfMonth(year,month)  
              {  
                  //获取本年本月的第一天日期  
                  var date = new Date(year,month-1,'01');  
                  //设置日期  
                  date.setDate(1);  
                  //设置月份  
                  date.setMonth(date.getMonth() + 1);  
                  //获取本月的最后一天  
                  cdate = new Date(date.getTime() - 1000*60*60*24);  
                  //打印某年某月的最后一天  
                  alert(cdate.getFullYear()+"年"+(Number(cdate.getMonth())+1)+"月最后一天的日期:"+cdate.getDate()+"日");   
                  //返回结果  
                  return cdate.getDate();  
              }  
        </script>  
    </head>  
    <body>  
        <input type="button" value="获取某年某月的最后一天" onclick="getLastDayOfMonth(2014,6)"/>  
    </body>  
</html>  


+++++JavaScript获取地址栏中的参数+++++
function getAddressURLParam(paramName)  
{  
     //构造一个含有目标参数的正则表达式的对象  
     var reg = new RegExp("(^|&)" + paramName + "=([^&]*)(&|$)");  
     //匹配目标参数  
     var url = window.location.search.substr(1).match(reg);  
    //返回参数值  
    if(url != null)  
     return unescape(url[2]);  
    return null;  
}  
获取type参数值：
var typeParem = getAddressURLParam(type);


++++JavaScript获取路径+++++
<%@ page language="java" import="java.util.*" pageEncoding="UTF-8"%>  
  
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">  
<html>  
  <head>  
      
    <title>JavaScript获取路径</title>  
      
    <meta http-equiv="pragma" content="no-cache">  
    <meta http-equiv="cache-control" content="no-cache">  
    <meta http-equiv="expires" content="0">      
    <meta http-equiv="keywords" content="keyword1,keyword2,keyword3">  
    <meta http-equiv="description" content="This is my page">  
    <script type="text/javascript">  
         function findPath()  
         {  
              //获取当前网址  
              var curNetAddr = window.document.location.href;  
              alert("获取当前网址:" + curNetAddr);  
                
              //获取主机地址之后的目录  
              var hostPath = window.document.location.pathname;  
              alert("获取主机地址之后的目录：" + hostPath);  
                
              //返回某个指定的字符串值在字符串中首次出现的位置  
              var count = curNetAddr.indexOf(hostPath);  
              alert("返回某个指定的字符串值在字符串中首次出现的位置：" + count);  
                
              //获取主机地址  
              var hostAddr = curNetAddr.substring(0,count);  
              alert("获取主机地址：" + hostAddr);  
                
              //获取带“/”的项目名  
              var projectName = hostPath.substring(0,hostPath.substr(1).indexOf('/')+1);  
              alert("获取带“/”的项目名：" + projectName);  
                
              //获取项目路径  
              var path = hostAddr + projectName;  
              alert("获取项目路径：" + path);  
         }  
    </script>  
  
  </head>  
    
  <body>  
     <div id="body_div">  
         <input type="button" id="btn" value="获取路径" onclick="findPath()"/>  
     </div>  
  </body>  
</html>  


+++++JavaScript获取当前日期++++++++
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">  
<html xmlns="http://www.w3.org/1999/xhtml">  
<head>  
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />  
<title>JavaScript获取当前日期</title>  
<script type="text/javascript">  
    /**  
      *获取日期  
      *  
     **/  
    function findDate()  
    {  
        //实例化一个对象date  
        var date = new Date();  
        //获取年份  
        var year = date.getFullYear();  
        //获取月份  
        var month = date.getMonth() + 1;  
        //获取日子  
        var day = date.getDate();  
        //拼接日期  
        var thisDate = year + "-" + (month<10 ? "0" + month : month) + "-" + (day<10 ? "0" + day : day);  
        //打印日期  
        alert("当前日期：" + thisDate);    
    }  
</script>  
</head>  
  
<body>  
   <input type="button" value="获取日期" onclick="findDate()"/>  
</body>  
</html>  


+++++JavaScript获取屏幕和页面的宽度和高度+++++
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">  
<html xmlns="http://www.w3.org/1999/xhtml">  
<head>  
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />  
<title>宽度和高度</title>  
<script type="text/javascript">  
    function widthAndHeight()  
    {  
        //网页可见区域宽  
        var clientWidth = document.body.clientWidth;  
        //网页可见区域高  
        var clientHeight = document.body.clientHeight;  
        //网页正文全文宽  
        var scrollWidth = document.body.scrollWidth;  
        //网页正文全文高  
        var scrollHeight = document.body.scrollHeight;  
        //网页可见区域宽(包括边线的宽)  
        var offWidth = document.body.offsetWidth;  
        //网页可见区域高(包括边线的宽)  
        var offHeight = document.body.offsetHeight;  
        //屏幕分辨率的宽  
        var screenWidth = window.screen.width;  
        //屏幕分辨率的高  
        var screenHeight = window.screen.height;  
        //屏幕可用工作区宽度  
        var avaWidth = window.screen.availWidth;  
        //屏幕可用工作区高度  
        var avaHeight = window.screen.availHeight;            
        document.writeln("网页可见区域宽：" + clientWidth + "<br>");  
        document.writeln("网页可见区域高：" + clientHeight + "<br>");  
        document.writeln("网页正文全文宽：" + scrollWidth + "<br>");  
        document.writeln("网页正文全文高：" + scrollHeight + "<br>");  
        document.writeln("网页可见区域宽(包括边线的宽)：" + offWidth + "<br>");  
        document.writeln("网页可见区域高(包括边线的宽)：" + offHeight + "<br>");  
        document.writeln("屏幕分辨率的宽：" + screenWidth + "<br>");  
        document.writeln("屏幕分辨率的高：" + screenHeight + "<br>");  
        document.writeln("屏幕可用工作区宽度：" + avaWidth + "<br>");  
        document.writeln("屏幕可用工作区高度：" + avaHeight + "<br>");            
    }  
</script>  
</head>  
  
<body>  
   <input type="button" id="btn" value="宽度和高度" onclick="widthAndHeight()"/>  
</body>  
</html> 


+++++JavaScript过滤特殊字符+++++++
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">  
<html xmlns="http://www.w3.org/1999/xhtml">  
<head>  
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />  
<title>JavaScript过滤特殊字符</title>  
<style type="text/css">  
    body{  
        width:80%;  
        background-color:#FFC;  
        height:100px;  
        font-size:14px;  
        font-family:"Times New Roman", Times, serif;  
        font-stretch:expanded;  
        font-style:inherit;  
        font-variant:inherit;  
        font-weight:bold;  
    }  
    #div1{  
        text-align:center;  
        width:100%;  
        height:100%;  
        line-height:inherit;  
    }  
    #btn{  
        font:Georgia, "Times New Roman", Times, serif;  
        font-size-adjust:inherit;  
        font-weight:bold;  
        background-color:#C96;  
        alignment-adjust:after-edge;  
        alignment-baseline:baseline;  
        word-break:break-all;  
        width:120px;  
        height:30px;  
        font-size:16px;  
        animation:ease;  
    }  
</style>  
<script type="text/javascript">  
    /**  
      * 过滤字符串函数  
      **/  
    function filterStr(str)  
    {  
        var pattern = new RegExp("[`~!@#$^&*()=|{}':;',\\[\\].<>/?~！@#￥……&*（）――|{}【】‘；：”“'。，、？%+_]");  
        var specialStr = "";  
        for(var i=0;i<str.length;i++)  
        {  
             specialStr += str.substr(i, 1).replace(pattern, '');   
        }  
        return specialStr;  
    }  
      
    /**  
      * 检测过滤字符串函数  
      **/  
    function checkStr()  
    {  
        var str = document.getElementById("pContent").innerHTML;  
        alert("过滤之前的字符串：" + str);  
        str = filterStr(str);  
        alert("过滤之后的字符串：" + str);  
    }  
</script>  
</head>  
  
<body>  
   <div id="div1">  
      <p id="pContent">张三huhnjhj$%$^%^%&^*&<>?{}{{[]()_+|@~`$378748hyfgtyt35451fdhjdsh&%^^&$#%%&^^*&(*%$%$f4857485</p>  
      <input type="button" id="btn" name="btn" value="过滤" onclick="checkStr()"/>  
   </div>  
</body>  
</html>  



+++++ JavaScript实现页面跳转++++++
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">  
<html>  
<head>  
<meta http-equiv="Content-Type" content="text/html; charset=GBK">  
<title>404 Not Found</title>  
</head>  
<body>  
 <h1>找不到指定的页面</h1>  
 <span id="totalSecond">3</span>秒后自动返回  
</body>  
<script language="javascript" type="text/javascript">  
<!--  
    var second = document.getElementById('totalSecond').textContent;  
    if (navigator.appName.indexOf("Explorer") > -1)  //判断是IE浏览器还是Firefox浏览器，采用相应措施取得秒数  
    {  
        second = document.getElementById('totalSecond').innerText;  
    } else  
    {  
        second = document.getElementById('totalSecond').textContent;  
    }  
    setInterval("redirect()", 1000);  //每1秒钟调用redirect()方法一次  
    function redirect()  
    {  
        if (second < 0)  
        {  
            location.href = 'http://www.baidu.com';  
        } else  
        {  
            if (navigator.appName.indexOf("Explorer") > -1)  
            {  
                document.getElementById('totalSecond').innerText = second--;  
            } else  
            {  
                document.getElementById('totalSecond').textContent = second--;  
            }  
        }  
    }  
-->  
</script>  
</html></td>  
      </tr>  
    </table> 



++++CSS3中-moz、-ms、-webkit和-o+++++++
1、-moz-：代表FireFox浏览器私有属性
2、-ms-：代表IE浏览器私有属性
3、-webkit-：代表safari、chrome浏览器私有属性
4、-o-：代表opera浏览器私有属性


++++++请描述一下 cookies，sessionStorage 和 localStorage 的区别？++++++
sessionStorage 和 localStorage 是HTML5 Web Storage API 提供的，可以方便的在web请求之间保存
数据。有了本地数据，就可以避免数据在浏览器和服务器间不必要地来回传递。
sessionStorage、localStorage、cookie都是在浏览器端存储的数据，其中sessionStorage的概念很特别，
引入了一个“浏览器窗口”的概念。sessionStorage是在同源的同窗口（或tab）中，始终存在的数据。
也就是说只要这个浏览器窗口没有关闭，即使刷新页面或进入同源另一页面，数据仍然存在。
关闭窗口后，sessionStorage即被销毁。同时“独立”打开的不同窗口，
即使是同一页面，sessionStorage对象也是不同的。
共同点：都是保存在浏览器端，且同源的。
区别：
cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。
而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据还有路径
（path）的概念，可以限制cookie只属于某个路径下。
存储大小限制也不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只
适合保存很小的数据，如会话标识。sessionStorage和localStorage 虽然也有存储大小的限制
，但比cookie大得多，可以达到5M或更大。
数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；
localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置
的cookie过期时间之前一直有效，即使窗口或浏览器关闭。
作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。
Web Storage 支持事件通知机制，可以将数据更新的通知发送给监听者。
Web Storage 的 api 接口使用更方便。



++++++++HTML5和HTML4之间的区别++++++++
1、HTML头部
（1）HTML5：
        <!doctype html>
（2）HTML4：
<!DOCTYPE html PUBLIC “-//W3C//DTD HTML 4.01//EN”
 “http://www.w3.org/TR/html4/strict.dtd”>
2、HTML编码
（1）HTML5：
	<meta charset=“utf-8”>
（2）HTML4：
	<meta http-equiv=”content-type”content=”text/html;charset=UTF-8”>
3、引入CSS样式文件
（1）HTML5：
       <link rel=”stylesheet” href=”demo.css”>
（2）HTML4：
	<link type=”text/css” rel=”stylesheet” href="demo.css”>
4、引入JS文件
（1）HTML5：
	<script src=”demo.js”></script>
（2）HTML4：
	<script type=”text/javascrpt” src="demo.js”></script>


+++++HTML中设置背景图的两种方式+++++
1、background
   background:url(images/search.png) no-repeat top;
2、background-image
   background-image：url(images/search.png)；
   background-repeat:no-repeat;


++++border-style的值及其作用+++++
border-style:dashed; /*虚线*/
border-style:dotted; /*点线*/
border-style:double; /*双线边框*/
border-style:groove; /*根据border-color的值画3D凹槽*/
border-style:hidden; /*隐藏边框*/
border-style:inherit; /*根据border-color的值画菱形边框*/
border-style:inset;  /*根据border-color的值画3D凹边*/
border-style:none;   /*不显示边框*/
border-style:outset;  /*根据border-color的值画3D凸边*/
border-style:ridge;  /*根据border-color的值画菱形边框*/
border-style:solid;  /*实线边框*/
border-style:!important;

+++CSS相关题目++++++
1、设置边框的样式用border-style实现，设置边框的颜色用border-color实现
2、CSS的语法由选择器、属性、值三部分组成
3、设置一个div的最小宽度为50像素，最大高度为100像素，实现这两个设置的方法是min-width:50px、max-height:100px
4、想要设置一个对象外的线条轮廓的样式为虚线边框，用outline-style: dashed实现该功能
5、在css中，如果想要阻止计数器增加的，用counter-increment : none来实现
6、如果想设置表格的行与单元格的边框合并在一起，可以用border-collapse：collapse来实现
7、在css中，如果想要阻止计数器增加的，用counter-increment : none来实现

 地址标签：<address>Wiyt's Email:126@126.com</address>

++++++javascript获取当前时间是一年当中的第几周++++++
  function getWeekOfYear(date){
    var year=date.getFullYear();
    var baseDate=new Date(year,0,1);
    var baseWeekDay=testDate.getDay();
    var dateWeekDay=date.getDay();
    if(baseWeekDay==0) baseWeekDay=7;
    if(dateWeekDay==0) dateWeekDay=7;
    var weekOfYear=Math.round(((date.getTime()-dateWeekDay*3600*24*1000)-(baseDate.getTime()-baseWeekDay*3600*24*1000))/(24*3600*1000)/7);
    return weekOfYear+1;}
