     主网站：   www.kancloud.cn/manual/thinkphp
1.  use Think\Controller   ----/1686
表示的是引入Think\Controller类库便于直接使用。
namespace Home\Controller;
use Think\Controller;
class IndexController extends Controller

等同于
namespace Home\Controller;
class IndexController extends \Think\Controller


那么这个Controller的方法在哪个文件找到？？
在：D:\wamp\wamp\apps\think\ThinkPHP\Library\OT\TagLib下面有一个Think.class.php。
里面有sql查询的封装方法，_query($tag,$content),_value($tag,$content,$type='getField'),
_count($attr,$content),_sum($attr,$content),_max($attr,$content), _min($attr,$content),
_avg($attr,$content),_article($tag,$content),等其他方法


use Think\Controller

引入的是D:\wamp\wamp\apps\think\ThinkPHP\Library\Think下的Controller.class.php文件，里面有start(),
addMap($class, $map='')，autoload($class)，instance($class,$method='')等方法


2  系统提供了C方法来读取已有的配置，用法：
$model=C("URL_MODEL");读取当前的URL模式配置参数
C("USER_CONFIG.USER_TYPE"); 读取用户配置的用户类型设置
C方法也可以用来动态设置某些参数，
C("DATA_CACHE_TIME",60); 改变缓存有效期
C方法可以用来批量设置配置参数
$config=array("WEB_SITE_TITLE"=>"Thinkphp","WEB_SITE_DESCRIPTION"=>"开源php框架");
C($config);

A A()方法用于在内部实例化控制器          （对控制器进行操作） 最简单的用法： $User = A('User');（适合用来调用使用其他模块内的多个方法，避免多次实例化对象）
R R()方法远程调用控制器的内部的操作方法  （对控制器进行操作） $index=R("Index","myHello"); echo $index;     实例化Index控制器，并且调用其中的myHello方法，将结果赋给$index,然后将其echo出去。（适合只需要使用其他模块内的其中一个方法 ）   
D 快速实例化Model类库   （对模型进行操作） D函数用于实例化一个存在模型文件的Model  
M 快速高性能实例化模型  （对模型进行操作） M函数用于实例化一个没有模型文件的Model（ M 实例化的是数据库的表名，D 实例化的是你自己在Model文件夹下面建立的模型文件，D就是在你没有定义模型的时候，系统帮你定义一个模型，这样你才可以进行简单的数据输出与输入）
U URL动态生成和重定向方法  U('Blog/read?id=1')普通模式，生成的URL地址是：http://serverName/index.php?m=Blog&a=read$id=1REWRITE模式，生成的URL地址是：http://serverName/Blog/read/id/1.html
C C()方法来读取已有的配置
L 语言参数存取方法
F 快速简单文本数据存取方法
S 快速缓存存取方法
B 执行行为类 B('app_begin');就是在项目开始之前，执行这个行为定义的所有函数,支持2个参数
W 快速Widget输出方法  

3.规则路由
每个参数以":"开头的参数都表示动态参数，自动对应一个GET参数，:year代表$_GET['year']

4.
ajaxReturn方法  默认是json格式
$data['status']=1;
$data['content']='content';
$this->ajaxReturn($data);

页面跳转与重定向  success和error方法
$User=M("User");
$result=$User->add($data);
if($result)
{
$this->success("新增成功","/User/index");
}
else
{
$this->error("新增失败");
}
 redirect()方法
$this->redirect("New/category",array(cate_id=>2),5,"页面跳转中");
停留5秒后跳转到New模块的category方法中，并且显示跳转中字样
redirect("/New/category/cate_id/2",5,"页面跳转中");
仅仅在5秒后跳到另一个url地址


I()方法  获取变量
I("get.id");  相当于 $_GET["id"];
I("get.name",0); 如果不存在$_GET["id"]，则返回0
I("get."); 获取整个$_GET的数组
I("post.name","htmlspacialchars");  采用htmlspecialchars方法对$_POST['name']进行过滤
I("cookie."); 获取整个Cookie数组
I("param.id") 相当于$_GET["id"]或者$_POST["id"],比较灵活，其实它更可以简写成I("id")
I("get.name","/^\d+$/"); 对传入的数据进行正则过滤
I("post.email",FILTER_VALIDATE_EMAIL)  对传入的数据进行email格式过滤，如果不符合则会返回0
类似的还有FILTER_FLOAT FILTER_BOOLEAN FILTER_URL FILTER_STRING FILTER_MAGIC_QUOTES 等等，具体的请
看www.kancloud.cn/manual/thinkphp/1721

5.判断请求类型
IS_GET IS_POST IS_AJAX IS_PUT 等等
if(IS_GET)
{
$user= M("User");
$user->create();
$user->save();
$user->success("保存成功");  //页面跳转
}
else
{
$this->error("非法请求");     //页面跳转
}

6.模型
通常继承系统的\Think\Model类或其他类，大多数操作数据表，大多数命名也是自动对应数据表，方便开发
UserModel约定对应think_user表   (think是前缀)
UserTypeModel约定对应think_type_model表
  

数据库连接支持3种方式：
1，字符串定义；2，数组定义；3，配置定义
第一种字符串：
new \Home\Model\NewModel('blog','think_',''mysql://root:1234@localhost/demo');
第二种数组：
$connection=array(
'db_type' => 'mysql',
'db_host' => '127.0.0.1',
'db_user'=>'root',
'db_pwd'=>'12345',
'db_port'=>3306,
'db_name'=>'demo',
'db_charset'=>'utf8',
);

7.数据库连贯操作

select()方法
查找数据
$User=M("User");
$User->where("type=1 AND status=1")->select();
以上等同于
select * from think_user where type=1 and status=1

add()方法  （写入数据库中）  
$User = M("User"); // 实例化User对象
$data['name'] = 'ThinkPHP';
$data['email'] = 'ThinkPHP@gmail.com';
$User->add($data);这样就插入了数据库中

save()方法  （更新到数据库中）
更新数据
在ThinkPHP中使用save方法更新数据库，并且也支持连贯操作的使用。
$User = M("User"); // 实例化User对象
$data['name'] = 'ThinkPHP';// 要修改的数据对象属性重新赋值
$data['email'] = 'ThinkPHP@gmail.com';// 要修改的数据对象属性重新赋值
$User->where('id=5')->save($data); // 根据条件保存修改的数据

delete()方法
删除数据
$User = M("User"); // 实例化User对象
$User->where('id=5')->delete(); // 删除id为5的用户数据
$User->where('status=0')->delete();//删除状态为0的所有用户数据

table()方法
切换操作的数据表；对多表进行操作。
$Model->table("think_user")->where("status>1")->select();
alias()方法
用于设置当前数据表的别名，便于使用其他连贯操作如join方法
$Model=M("User");
$Model->alias("a")->join("__DEPT__ b ON b.user_id=a.id")->select();
最终生成如下：
select * from think_user a inner join think_dept b ON b.user_id=a.id
create方法  创建数据对象
$data['name']='Thinkphp';$data['123@qq.com'];$User->Create($data);Create方法创建的数据对象时保存在内存中的，
并没有实际的写入到数据库中，使用add()或者save()方法才会真正写入数据库中，谨记谨记！！！！
插入数据
可以对POST提交的数据进行处理（通过表中的字段名称与表单提交的名称对应关系自动封装数据实例），
例如user表中有一个字段名叫"username",如果表单中有一个<input name="username" value="小明">,
那么$User = M('User'); $data = $User->create(); echo $data['username'];就会输出"小明",不用你用$_POST['username']去接收。
field()方法
主要目标是要返回或者操作的字段，用于查询与写入操作
$Model->field('id,title,content')->select();
相当于 select id,title,content from table;
它也可以用来给某个字段设置别名：
$Model->field('idnickname as name')->select();
相当于 select id,nickname as name from table;
也可以再field方法中直接使用函数，
$Model->field('id,SUM(score)')->select();
相当于 select id,SUM(socre) from table;
$Model->select();
$Model->field()->select();
$Model->field('*')->select();
以上三个效果相同，都等于 select * from table
$Model->field(true)->select(); 显示数据库中所有字段列表
$Model->field('content',true)->select();
显示除content字段之外的所有其他字段
order()方法
对数据进行排序
$Model->where('status=1')->order('id desc')->limit(5)->select();
相当于 select * from table where status=1 limit(5) order by id desc;
group()方法 
对应原生的group by()函数，用于结合合计函数，根据一个或者多个结果进行分组，
例如有一个Orders表
----------------------
OrderPrice  Customer
---------------------- 
1000        Bush
1600        Carter
700         Bush
300         Bush
2000        Adams
100         Carter
----------------------
$this->field('Customer,SUM(OrderPrice)')->group('Customer')->select();
相当于
select Customer.SUM(OrderPrice) From 'Orders' group by Customer
结果是：  Bush 2000   ; Carter     1700    ;Adams       2000.
having()方法
用于配合group()方法完成从分组的结果中筛选数据
$this->field('Customer,SUM(OrderPrice)')->group('Customer')->having('SUM(OrderPrice>1800)')->select();
结果为:    Bush  2000  ;  Adams    2000;
join()方法
用于根据两个或者多个表中的列之间的关系，从这些表中查询数据
inner join  如果表中至少有一个匹配，则返回行
left join  即使右表中没有匹配，也从左表返回所有的行
right join 即使左表中没有匹配，也从右表返回所有的行
full join 只要其中一个表中存在匹配，就返回两个表中的所有的行
$Model=M('Article');
$Model->join('RIGHT JOIN __WORK__ON__ARTIST__.id=__WORK__.artist_id')->select();
union()方法
union操作用于合并两个或多个select语句的结果集
$Model->field('name')->table('think_user_0')->union('select name from think_user_1')
->union('select name from think_user_2')->select();
distinct()
distinct()用于列出表中仅仅不同的值，多个重复的值只输出一次
------------
id  name
------------
1   a
2   a
3   b
4   a
5   c
6   c
-------------
$Model->distinct(true)->field('name')->select();
相当于 select distinct name from think_user;
结果为 a ; b ; c;
lock()方法-设置数据库锁机、cache()方法-设置数据库缓存、comment()方法-添加注释内容、token()方法-用于临时关闭令牌验证、
find()方法
读取数据，它与select()语句很像，但是不一样！！find它返回的是满足条件的第一组数据的一维数组，而select返回的是一个结果集，是数据库中所有满足条件的一行或多行记录的二维数组。
表达式查询，EQ（相等）、NEQ（不相等）、GT（大于）、LT（小于）等等
$map['id']=array('eq',100);
相当于 $map['id']=100;
query()方法
用于执行SQL查询操作，如果数据非法或者查询错误则返回false，否则返回结果集。该方法仅用于读，对数据库写的话请使用exexute()
$Model= new \Think\Model();//实例化一个model对象，没有对应任何数据表
$Model->query("select * from think_user where status=1");
execute()方法
用于更新和写入数据的sql操作，如果数据非法或者查询错误返回false，否则返回影响的记录数。
$Model= new \Think\Model();
$Model->execute("update  think_user set name='thinkphp' where status=1");
模板
assign()方法
assign()方法对模板变量进行赋值，无论何种变量类型都是用assign,assign必须在display和show方法之前调用。
$this->assign('name',$value);
$this->name=$value;
如果同时输出多个模板变量，可以用数组形式：
$array['name']='thinkphp';
$array['email']='123@qq.com';
$array['phone']='1234567';
$this->assign($array);
在模板文件中同时接收到name、email、phone三个变量，可以用{$name}{$email}{$phone}输出显示出来
display()方法    模板渲染
$this->display();系统根据默认规则定位模板文件，定位到\当前模块\默认视图目录\当前主题\当前控制器\当前操作.html
$this->display('edit'); 指定edit.html文件接受渲染
$this->display('Member:read'); 指定Member控制器下的read模板，也就是read.html
$this->theme('blue')->display('User:edit'); 调用blue主题下面的User控制器的edit模板
$this->display('read','utf-8','text/html'); 指定在utf-8编码text/html类型下read.html模板文件接受渲染
fetch()方法     获取渲染模板的输出内容而不是直接输出（display()），可以使用fetch()方法
$content=$this->fetch('Member:edit');
把edit模板的内容赋给$content,然后可以对$content进行处理

系统变量输出
{$Think.server.script_name}  输出$_SERVER["SCRIPT_NAME"]
{$Think.session.user_id} 输出$_SESSION["user_id"]
{$Think.get.pageNumber}  输出$_GET["pageNumber"]
{$Think.cookie.name} 输出$_COOKIE["name"]

使用函数
{$data.name|md5}
相当于：<?php echo(md5($data["name"]));?>
多函数也是支持的
{$name|md5|strtoupper}
相当于: <?php echo (strtoupper(md5($name)));?>

以下为模板内容
模板  <block></block> 好比类的继承一样，模板也可以定义一个基础模板，并且其中定义的区块，然后继承该基础模板的子模板就可以对基础模板这个中定义的区块进行重载。
定义一个base.html的基础模板文件
<extend name="base" />  引入base.html文件

thinkphp中的三目运算
{$status?"成功":"失败"}

上传操作
使用的是Think\upload类，假设前面的表单提交到当前控制器的upload方法:
public function upload()
{
$upload=new \Think\Upload(); //实例化上传类
$upload->maxSize =354728;
$upload->exts    = array('jpg','png','gif','jpeg');
$upload->rootPath= './Uploads/';
$upload->savePath='';
$info =$upload->upload();
if(!$info)
{
$this->error($upload->getError());
}
else
{
$this->success('上传成功！');
}


getDbError();调用数据库相关错误
getError();调用模型等其他错误
}

生成验证码
Think\Verify类可以支持验证码的生成与验证功能
$Verify= new \Think\Verify();
$Verify->entry();
生成的验证码信息会保存到session中，包含的数据有：
array('verify_code'=>'当前验证码的值'，verify_time=>'验证码生成的时间戳');

图像处理
使用\think\Image类进行图像处理功能，支持GD库和Imagick库。
$image= new \Think\Image();
$image->open("./1.jpg");
$width=$image->width(); //返回图片的高度
$height=$image->height();
$type=$image->type(); //返回图片的类型
$size=$image->size();  //返回图片的尺寸
$image->crop(400,400)->save('./crop.jpg'); //将图片裁剪为400*400并保存为crop.jpg

REST(Representational State Transfer表述性状态转移)是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。REST是设计风格而不是标准。REST通常基于使用HTTP，URI，和XML以及HTML这些现有的广泛流行的协议和标准。

get_client_ip获取客户端的IP地址
$ip=get_client_ip();


从数据库中取出数据实例：  操作数据库的方法在model文件中才有，所以必须先实例化M（）方法，或者 new \Think\Model();
1》》》》
  $Model=new \Think\Model();//这种方法取出的是数据库中不是以onethink_为前缀的数据表 
  $table=$Model->query('select * from addcategory where id =5');
2》》》》
  $Data=M('action');//这里种默认找数据库中_onethink_action的数据表，可以在conf文件中更改设置，因为操作数据库的方法在model文件中才有，所以必须先实例化M（）方法，或者 new \Think\Model();
  $table=$Data->field('remark')->where('id=5')->select();
更新数据库信息实例：
  //更新的是onethink_action表中id=1条数据的remark信息
$Model=D('action');
	$data['remark']='+10';
	$res=$Model->where('id=1')->save($data);
	if($res)
		{
	 $this->success("成功");
	  }
	  else
		  {
	  
	  	 $this->success("失败",U('Index/index'));//Index/index表示的是该大的目录(Home)下Index控制器中index方法，改成Admin/Index/index可以跳到后台Index控制器下的index方法，如果没有登录，则会跳到login方法

	  }
删除数据库信息实例：

$Model=D('action');
	$res=$Model->where('id=5')->delete();
	if($res)
		{
	 $this->success('删除成功',U('Index/index'));
	  }
	  else
		  {
	  
	  	 $this->success("删除失败",U('Index/index'));//Index/index表示的是该大的目录(Home)下Index控制器中index方法，改成Admin/Index/index可以跳到后台Index控制器下的index方法，如果没有登录，则会跳到login方法

	  }

插入数据库信息实例：       //注意语法的格式，是$res=$Model->add($data);   没有field,没有where
 $Model=D('action_log');
	$data['action_id']='1';
	$data['user_id']='1';
	$data['action_ip']=$_SERVER['REMOTE_ADDR'];
	$data['model']='member';
	$data['record_id']='1';
	$data['remark']='这是添加的一条数据'; 
	$data['status']='1';
	$data['create_time']=time();
//	var_dump($data['user_ip']);

	$res=$Model->add($data);
	if($res)
		{
	 $this->success('成功',U('Index/index'));
	  }
	  else
		  {
	  
	  	 $this->success("失败",U('Index/index'));//Index/index表示的是该大的目录(Home)下Index控制器中index方法，改成Admin/Index/index可以跳到后台Index控制器下的index方法，如果没有登录，则会跳到login方法

	  }

在视图文件中写链接：
<volist name="data" id="vo">
<tr><td>{$vo['categoryname']}</td><td>
{$vo['highlevel']} </td><td>
{$vo['categorymessage']}</td><td>
{$vo['categorysort']}</td><td>
{$vo['categorystatus']}</td>
<td>{$vo['id']}<a href='{:U("Category/edit?id=$vo[id]")}'>修改</a></td>   //看这里看这里看这里看这里  id=$vo[id]
</volist>





strcmp()函数
比较两个字符串（区分大小写）：
<?php
echo strcmp("Hello world!","Hello world!");
?>

array_unique() 函数
该函数用来移除数组中的重复的值，并返回结果数组。
当几个数组元素的值相等时，只保留第一个元素，其他的元素被删除。
返回的数组中键名不变。
语法
array_unique(array)

控制器接收表单传递数据时候需要有一个IS_POST的判断，不然会出现未知错警告
	if(IS_POST)                   //提交表单接受时候必须要有一个IS_POST的判断
	   {
		if($update)
	    {
		$this->success('编辑成功！',U('Index'));
		}
		else
	   {
		$this->error(empty($error) ? '未知错误！' : $error);
		}
	   }