主网站：   www.kancloud.cn/manual/thinkphp

1.  use Think\Controller   ----/1686
表示的是引入Think\Controller类库便于直接使用。
namespace Home\Controller;
use Think\Controller;
class IndexController extends Controller

等同于
namespace Home\Controller;
class IndexController extends \Think\Controller


那么这个Controller的方法在哪个文件找到？？
在：D:\wamp\wamp\apps\think\ThinkPHP\Library\OT\TagLib下面有一个Think.class.php。
里面有sql查询的封装方法，_query($tag,$content),_value($tag,$content,$type='getField'),
_count($attr,$content),_sum($attr,$content),_max($attr,$content), _min($attr,$content),
_avg($attr,$content),_article($tag,$content),等其他方法


use Think\Controller

引入的是D:\wamp\wamp\apps\think\ThinkPHP\Library\Think下的Controller.class.php文件，里面有start(),
addMap($class, $map='')，autoload($class)，instance($class,$method='')等方法


2  系统提供了C方法来读取已有的配置，用法：
$model=C("URL_MODEL");读取当前的URL模式配置参数
C("USER_CONFIG.USER_TYPE"); 读取用户配置的用户类型设置
C方法也可以用来动态设置某些参数，
C("DATA_CACHE_TIME",60); 改变缓存有效期
C方法可以用来批量设置配置参数
$config=array("WEB_SITE_TITLE"=>"Thinkphp","WEB_SITE_DESCRIPTION"=>"开源php框架");
C($config);


$this 可以使用 $this 来调用当前模块内的方法，但实际情况中还经常会在当前模块调用其他模块的方法。ThinkPHP 内置了 A 方法与 R 方法这两个特殊的大写字母方法来处理跨模块调用的问题。
A A()方法用于在内部实例化控制器        （对控制器进行操作）（适合需要使用其他模块内的所有方法） 最简单的用法： $User = A('User');（适合用来调用使用其他模块内的多个方法，避免多次实例化对象）
CategoryController.class.php调用同在Admin/Controller（后台）目录下的ModelController.class.php控制器
$Model3=A('Model');             //看这里看这里看这里看这里
$name=$Model3->showName();
$this->assign('testname',$name);
CategoryController.class.php调用在Home/Controller（前台）目录下的IndexController.class.php控制器
$Home=A('Home/Index');
$kuai=$Home->testA();
$this->assign('testa',$kuai);
R R()方法远程调用控制器的内部的操作方法（对控制器进行操作）（适合只需要使用其他模块内的其中一个方法）
$Model3=R("Model/showName");    //看这里看这里看这里看这里   从它与A方法的写法区别上可以看出，R()方法适合用来调用其他模块其中的一个方法
$this->assign('testname',$Model3);
该实例与A方法中第一个效果一样。但是写法上不一样。
实例化Model控制器，并且调用其中的showName方法，将结果赋给$Model3,然后将其传到视图文件中。   
D 快速实例化Model类库 (使用复杂功能)（对模型进行操作） （D函数用于实例化一个存在模型文件的Model）（需要使用 ThinkPHP 模型中一些高级功能如自动验证功能（create()方法中实现）、关联模型等业务逻辑比较复杂，且涉及的表众多）
M 快速高性能实例化模型  （简单CURD）（对模型进行操作） （M函数用于实例化一个没有模型文件的Model）（ M 实例化的是数据库的表名，D 实例化的是你自己在Model文件夹下面建立的模型文件，D就是在你没有定义模型的时候，系统帮你定义一个模型，这样你才可以进行简单的数据输出与输入，对数据表进行简单的 CURD 操作而无复杂的业务逻辑的情况下）
U URL动态生成和重定向方法 在非视图文件中 U('Blog/read?id=1'),在视图文件中{:U('')}; 普通模式，生成的URL地址是：http://serverName/index.php?m=Blog&a=read$id=1REWRITE模式，生成的URL地址是：http://serverName/Blog/read/id/1.html
C C()方法来读取已有的配置
L 语言参数存取方法
F 快速简单文本数据存取方法
S 快速缓存存取方法
B 执行行为类 B('app_begin');就是在项目开始之前，执行这个行为定义的所有函数,支持2个参数
W 快速Widget输出方法  


3.规则路由
每个参数以":"开头的参数都表示动态参数，自动对应一个GET参数，:year代表$_GET['year']

4.
ajaxReturn方法  默认是json格式
$data['status']=1;
$data['content']='content';
$this->ajaxReturn($data);

页面跳转与重定向  success和error方法
$User=M("User");
$result=$User->add($data);
if($result)
{
$this->success("新增成功",U('Index'));
}
else
{
$this->error("新增失败");
}
 redirect()方法
$this->redirect("New/category",array(cate_id=>2),5,"页面跳转中");
停留5秒后跳转到New模块的category方法中，并且显示跳转中字样
redirect("/New/category/cate_id/2",5,"页面跳转中");
仅仅在5秒后跳到另一个url地址


I()方法  获取变量
I("get.id");  相当于 $_GET["id"];
I("get.name",0); 如果不存在$_GET["id"]，则返回0
I("get."); 获取整个$_GET的数组
I("post.name","htmlspacialchars");  采用htmlspecialchars方法对$_POST['name']进行过滤
I("cookie."); 获取整个Cookie数组
I("param.id") 相当于$_GET["id"]或者$_POST["id"],比较灵活，其实它更可以简写成I("id")
I("get.name","/^\d+$/"); 对传入的数据进行正则过滤
I("post.email",FILTER_VALIDATE_EMAIL)  对传入的数据进行email格式过滤，如果不符合则会返回0
类似的还有FILTER_FLOAT FILTER_BOOLEAN FILTER_URL FILTER_STRING FILTER_MAGIC_QUOTES 等等，具体的请
看www.kancloud.cn/manual/thinkphp/1721

5.判断请求类型
IS_GET IS_POST IS_AJAX IS_PUT 等等
if(IS_GET)
{
$user= M("User");
$user->create();
$user->save();
$user->success("保存成功");  //页面跳转
}
else
{
$this->error("非法请求");     //页面跳转
}

6.模型
通常继承系统的\Think\Model类或其他类，大多数操作数据表，大多数命名也是自动对应数据表，方便开发
UserModel约定对应think_user表   (think是前缀)
UserTypeModel约定对应think_type_model表
  

数据库连接支持3种方式：
1，字符串定义；2，数组定义；3，配置定义
第一种字符串：
new \Home\Model\NewModel('blog','think_',''mysql://root:1234@localhost/demo');
第二种数组：
$connection=array(
'db_type' => 'mysql',
'db_host' => '127.0.0.1',
'db_user'=>'root',
'db_pwd'=>'12345',
'db_port'=>3306,
'db_name'=>'demo',
'db_charset'=>'utf8',
);

7.数据库连贯操作

select()方法
查找数据
$User=M("User");
$User->where("type=1 AND status=1")->select();
以上等同于
select * from think_user where type=1 and status=1

add()方法  （写入数据库中）  
$User = M("User"); // 实例化User对象
$data['name'] = 'ThinkPHP';
$data['email'] = 'ThinkPHP@gmail.com';
$User->add($data);这样就插入了数据库中

save()方法  （更新到数据库中）
更新数据
在ThinkPHP中使用save方法更新数据库，并且也支持连贯操作的使用。
$User = M("User"); // 实例化User对象
$data['name'] = 'ThinkPHP';// 要修改的数据对象属性重新赋值
$data['email'] = 'ThinkPHP@gmail.com';// 要修改的数据对象属性重新赋值
$User->where('id=5')->save($data); // 根据条件保存修改的数据

delete()方法
删除数据
$User = M("User"); // 实例化User对象
$User->where('id=5')->delete(); // 删除id为5的用户数据
$User->where('status=0')->delete();//删除状态为0的所有用户数据

table()方法
切换操作的数据表；对多表进行操作。
$Model->table("think_user")->where("status>1")->select();
alias()方法
用于设置当前数据表的别名，便于使用其他连贯操作如join方法
$Model=M("User");
$Model->alias("a")->join("__DEPT__ b ON b.user_id=a.id")->select();
最终生成如下：
select * from think_user a inner join think_dept b ON b.user_id=a.id
create方法  创建数据对象
$data['name']='Thinkphp';$data['123@qq.com'];$User->Create($data);Create方法创建的数据对象时保存在内存中的，
并没有实际的写入到数据库中，create可以创建那边form表单内传过来的字段，但不能传过来不在里面的东西；使用add()或者save()方法才会真正写入数据库中，谨记谨记！！！！
插入数据
可以对POST提交的数据进行处理（通过表中的字段名称与表单提交的名称对应关系自动封装数据实例），
例如user表中有一个字段名叫"username",如果表单中有一个<input name="username" value="小明">,
那么$User = M('User'); $data = $User->create(); echo $data['username'];就会输出"小明",不用你用$_POST['username']去接收。
field()方法
主要目标是要返回或者操作的字段，用于查询与写入操作
$Model->field('id,title,content')->select();
相当于 select id,title,content from table;
它也可以用来给某个字段设置别名：
$Model->field('idnickname as name')->select();
相当于 select id,nickname as name from table;
也可以再field方法中直接使用函数，
$Model->field('id,SUM(score)')->select();
相当于 select id,SUM(socre) from table;
$Model->select();
$Model->field()->select();
$Model->field('*')->select();
以上三个效果相同，都等于 select * from table
$Model->field(true)->select(); 显示数据库中所有字段列表
$Model->field('content',true)->select();
显示除content字段之外的所有其他字段
order()方法
对数据进行排序
$Model->where('status=1')->order('id desc')->limit(5)->select();
相当于 select * from table where status=1 limit(5) order by id desc;
group()方法 
对应原生的group by()函数，用于结合合计函数，根据一个或者多个结果进行分组，
例如有一个Orders表
----------------------
OrderPrice  Customer
---------------------- 
1000        Bush
1600        Carter
700         Bush
300         Bush
2000        Adams
100         Carter
----------------------
$this->field('Customer,SUM(OrderPrice)')->group('Customer')->select();
相当于
select Customer.SUM(OrderPrice) From 'Orders' group by Customer
结果是：  Bush 2000   ; Carter     1700    ;Adams       2000.
having()方法
用于配合group()方法完成从分组的结果中筛选数据
$this->field('Customer,SUM(OrderPrice)')->group('Customer')->having('SUM(OrderPrice>1800)')->select();
结果为:    Bush  2000  ;  Adams    2000;
join()方法
用于根据两个或者多个表中的列之间的关系，从这些表中查询数据
inner join  如果表中至少有一个匹配，则返回行
left join  即使右表中没有匹配，也从左表返回所有的行
right join 即使左表中没有匹配，也从右表返回所有的行
full join 只要其中一个表中存在匹配，就返回两个表中的所有的行
$Model=M('Article');
$Model->join('RIGHT JOIN __WORK__ON__ARTIST__.id=__WORK__.artist_id')->select();
union()方法
union操作用于合并两个或多个select语句的结果集
$Model->field('name')->table('think_user_0')->union('select name from think_user_1')
->union('select name from think_user_2')->select();
distinct()
distinct()用于列出表中仅仅不同的值，多个重复的值只输出一次
------------
id  name
------------
1   a
2   a
3   b
4   a
5   c
6   c
-------------
$Model->distinct(true)->field('name')->select();
相当于 select distinct name from think_user;
结果为 a ; b ; c;
lock()方法-设置数据库锁机、cache()方法-设置数据库缓存、comment()方法-添加注释内容、token()方法-用于临时关闭令牌验证、
find()方法
读取数据，它与select()语句很像，但是不一样！！find它返回的是满足条件的第一组数据的一维数组，而select返回的是一个结果集，是数据库中所有满足条件的一行或多行记录的二维数组。
表达式查询，EQ（相等）、NEQ（不相等）、GT（大于）、LT（小于）等等
$map['id']=array('eq',100);
相当于 $map['id']=100;
query()方法
用于执行SQL查询操作，如果数据非法或者查询错误则返回false，否则返回结果集。该方法仅用于读，对数据库写的话请使用exexute()
$Model= new \Think\Model();//实例化一个model对象，没有对应任何数据表
$Model->query("select * from think_user where status=1");
execute()方法
用于更新和写入数据的sql操作，如果数据非法或者查询错误返回false，否则返回影响的记录数。
$Model= new \Think\Model();
$Model->execute("update  think_user set name='thinkphp' where status=1");
模板
assign()方法
assign()方法对模板变量进行赋值，无论何种变量类型都是用assign,assign必须在display和show方法之前调用。
$this->assign('name',$value);
$this->name=$value;
如果同时输出多个模板变量，可以用数组形式：
$array['name']='thinkphp';
$array['email']='123@qq.com';
$array['phone']='1234567';
$this->assign($array);
在模板文件中同时接收到name、email、phone三个变量，可以用{$name}{$email}{$phone}输出显示出来
display()方法    模板渲染
$this->display();系统根据默认规则定位模板文件，定位到\当前模块\默认视图目录\当前主题\当前控制器\当前操作.html
$this->display('edit'); 指定edit.html文件接受渲染
$this->display('Member:read'); 指定Member控制器下的read模板，也就是read.html
$this->theme('blue')->display('User:edit'); 调用blue主题下面的User控制器的edit模板
$this->display('read','utf-8','text/html'); 指定在utf-8编码text/html类型下read.html模板文件接受渲染
fetch()方法     获取渲染模板的输出内容而不是直接输出（display()），可以使用fetch()方法
$content=$this->fetch('Member:edit');
把edit模板的内容赋给$content,然后可以对$content进行处理

系统变量输出
{$Think.server.script_name}  输出$_SERVER["SCRIPT_NAME"]
{$Think.session.user_id} 输出$_SESSION["user_id"]
{$Think.get.pageNumber}  输出$_GET["pageNumber"]
{$Think.cookie.name} 输出$_COOKIE["name"]

使用函数
{$data.name|md5}
相当于：<?php echo(md5($data["name"]));?>
多函数也是支持的
{$name|md5|strtoupper}
相当于: <?php echo (strtoupper(md5($name)));?>

以下为模板内容
模板  <block></block> 好比类的继承一样，模板也可以定义一个基础模板，并且其中定义的区块，然后继承该基础模板的子模板就可以对基础模板这个中定义的区块进行重载。
定义一个base.html的基础模板文件
<extend name="base" />  引入base.html文件

thinkphp中的三目运算
{$status?"成功":"失败"}

上传操作
使用的是Think\upload类，假设前面的表单提交到当前控制器的upload方法:
public function upload()
{
$upload=new \Think\Upload(); //实例化上传类
$upload->maxSize =354728;
$upload->exts    = array('jpg','png','gif','jpeg');
$upload->rootPath= './Uploads/';
$upload->savePath='';
$info =$upload->upload();
if(!$info)
{
$this->error($upload->getError());
}
else
{
$this->success('上传成功！');
}


getDbError();调用数据库相关错误
getError();调用模型等其他错误
}

生成验证码
Think\Verify类可以支持验证码的生成与验证功能
$Verify= new \Think\Verify();
$Verify->entry();
生成的验证码信息会保存到session中，包含的数据有：
array('verify_code'=>'当前验证码的值'，verify_time=>'验证码生成的时间戳');

图像处理
使用\think\Image类进行图像处理功能，支持GD库和Imagick库。
$image= new \Think\Image();
$image->open("./1.jpg");
$width=$image->width(); //返回图片的高度
$height=$image->height();
$type=$image->type(); //返回图片的类型
$size=$image->size();  //返回图片的尺寸
$image->crop(400,400)->save('./crop.jpg'); //将图片裁剪为400*400并保存为crop.jpg

REST(Representational State Transfer表述性状态转移)是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。REST是设计风格而不是标准。REST通常基于使用HTTP，URI，和XML以及HTML这些现有的广泛流行的协议和标准。

get_client_ip获取客户端的IP地址
$ip=get_client_ip();

display()与show（）
模板定义后就可以通过display和show方法来渲染输出。其中display方法需要我们有定义模板文件，而show方法则是直接渲染内容输出。
$this->display()；$this->show()

从数据库中取出数据实例：  操作数据库的方法在model文件中才有，所以必须先实例化M（）方法，或者 new \Think\Model();
1》》》》
  $Model=new \Think\Model();//这种方法取出的是数据库中不是以onethink_为前缀的数据表 
  $table=$Model->query('select * from addcategory where id =5');
2》》》》
  $Data=M('action');//这里种默认找数据库中_onethink_action的数据表，可以在conf文件中更改设置，因为操作数据库的方法在model文件中才有，所以必须先实例化M（）方法，或者 new \Think\Model();
  $table=$Data->field('remark')->where('id=5')->select();
更新数据库信息实例：
  //更新的是onethink_action表中id=1条数据的remark信息
$Model=D('action');
	$data['remark']='+10';
	$res=$Model->where('id=1')->save($data);
	if($res)
		{
	 $this->success("成功");
	  }
	  else
		  {
	  
	  	 $this->success("失败",U('Index/index'));//Index/index表示的是该大的目录(Home)下Index控制器中index方法，改成Admin/Index/index可以跳到后台Index控制器下的index方法，如果没有登录，则会跳到login方法

	  }
删除数据库信息实例：

$Model=D('action');
	$res=$Model->where('id=5')->delete();
	if($res)
		{
	 $this->success('删除成功',U('Index/index'));
	  }
	  else
		  {
	  
	  	 $this->success("删除失败",U('Index/index'));//Index/index表示的是该大的目录(Home)下Index控制器中index方法，改成Admin/Index/index可以跳到后台Index控制器下的index方法，如果没有登录，则会跳到login方法

	  }

插入数据库信息实例：       //注意语法的格式，是$res=$Model->add($data);   没有field,没有where
 $Model=D('action_log');
	$data['action_id']='1';
	$data['user_id']='1';
	$data['action_ip']=$_SERVER['REMOTE_ADDR'];
	$data['model']='member';
	$data['record_id']='1';
	$data['remark']='这是添加的一条数据'; 
	$data['status']='1';
	$data['create_time']=time();
//	var_dump($data['user_ip']);

	$res=$Model->add($data);
	if($res)
		{
	 $this->success('成功',U('Index/index'));
	  }
	  else
		  {
	  
	  	 $this->success("失败",U('Index/index'));//Index/index表示的是该大的目录(Home)下Index控制器中index方法，改成Admin/Index/index可以跳到后台Index控制器下的index方法，如果没有登录，则会跳到login方法

	  }

在视图文件中写链接：
<volist name="data" id="vo">
<tr><td>{$vo['categoryname']}</td><td>
{$vo['highlevel']} </td><td>
{$vo['categorymessage']}</td><td>
{$vo['categorysort']}</td><td>
{$vo['categorystatus']}</td>
<td>{$vo['id']}<a href='{:U("Category/edit?id=$vo[id]")}'>修改</a></td>   //看这里看这里看这里看这里  id=$vo[id]
</volist>


 控制器接收表单传递数据时候需要有一个IS_POST或者IS_GET的判断，以确定是需要显示页面还是数据处理！



ThinkPHP实现Ajax方法具体实现：
MessageAction.class.php页面代码如下：
<?php
class MessageAction extends Action{
   
  function index(){
    $this->display();  
  }
 
  function addtwo(){
    $m=M('message');
    if($vo=$m->create()){
      if($m->add()){
        $this->ajaxReturn($vo,'添加成功',1);  
      }else{
        $this->ajaxReturn(0,'添加失败',0);  
      }  
    }else{
      $this->error($m->getError());  
    }
  }
}
?>
模板index.html代码如下：
<html>
<head>
<script type="text/javascript" src="__PUBLIC__/Js/Base.js"></script>
<script type="text/javascript" src="__PUBLIC__/Js/prototype.js"></script>
<script type="text/javascript" src="__PUBLIC__/Js/mootools.js"></script>
<script type="text/javascript" src="__PUBLIC__/Js/ThinkAjax.js"></script>
<script type="text/javascript">
  function add(){
                                  //ThinkAjax.sendForm(表单ID,URL,回调函数,信息显示的地方);
    ThinkAjax.sendForm('frm','__URL__/addtwo',wc);  
  }
  function wc(data,status){
    if(status!=1){
      alert('发送失败');
    }else{
      $('list').innerHTML+='标题'+data.title+',信息'+data.message;  
    }  
  }
</script>
 
</head>
<body>
<div id="list"></div>
<form action="" method="POST" id="frm">
 标题：<input type="text" name="title" /><br />
 信息：<input type="text" name="message" /><br />
    <input type="button" value="提交" onClick="add()" />
</form>
</body>
</html>

   在thinkphp中,$this可以赋值: 在控制器中写上 $this->meta_title = '模型管理';在视图文件中用{$meta_title}接收显示
复杂的U()写法：
   <a href="{:U('model/setstatus?ids='.$vo['id'].'&status='.abs(1-$vo['status']))}" class="ajax-get">{$vo.status|show_status_op}</a>
   <a href="{:U('model/edit?id='.$vo['id'])}">编辑</a>

某网站后台的分页操作实例：
Controller文件中：
在namespace下加上
use \Think\Page;
        $Model=D('addcategory'); 
        $list = $Model->page($_GET['p'].',5')->select();
	$this->assign('data',$list);// 赋值数据集
	import(“ORG.Util.Page”);// 导入分页类
	$count      = $Model->count();// 查询满足要求的总记录数
	$Page       = new Page($count,5);// 实例化分页类 传入总记录数和每页显示的记录数
	$show       = $Page->show();// 分页显示输出   //var_dump($show);  这里已经把所有分页链接生成
	$this->assign('_page',$show);// 赋值分页输出
	$this->display(); // 输出模板

视图文件中：           //好像除了if标签里的变量需要加$,其他的标签都不需要   -》有待考证
<div class="page">
        {$_page}
    </div>


---MVC--- 中的分页实例：
模型文件中：
<?php
namespace Admin\Model;
use Think\Model;
use \Think\Page;
class MessageModel extends Model {

	public function getData(){
      import('ORG.Util.Page');
      $Model=D('tel_message');
      if(empty($_GET['p'])){           //如果刚加载$_GET['p']为空，给它默认值1
      	$_GET['p']=1;
      }
      $data = $Model->field(true)->page($_GET['p'].',5')->select();
      $count=$Model->count();
      $Page=new Page($count,5);
      $show=$Page->show();
      $array=array();
      $array['data']=$data;
      $array['show']=$show;
      return $array;
	}
}

控制器文件中：
<?php 
namespace Admin\Controller;
class MessageController extends AdminController {
    public function index(){
    	 $my=D('Message');
	 $array=$my->getData();	 
	 $this->assign('_page',$array['show']);
	 $this->assign('data',$array['data']);
     $this->display();
    }
    
}


视图文件中依旧是：
<div class="Page">
 {$_page}
</div>



自己写的两个分页小例子（非MVC）：
1--》控制器：
$Model=D('addcategory'); 
$result=$Model->field('*')->limit(5)->page($_GET['p'])->select();
$count=$Model->count();
$Everypage=5;
$pagecount=ceil($count/$Everypage);
$this->assign('count',$count);
$this->assign('pagecount',$pagecount);
视图：
<p>共{$count}条数据|共{$pagecount}页
<?php 
for($i=1;$i<=$pagecount;$i++)
{
echo "<a href='http://think.myjiang.com:8080/index.php?s=/Admin/Category/index/p/$i.html'>$i</a>";
}
?>
</p>

2--》控制器：(只需要传过来总页数$pagecount就行了)
$count= $Model->count();// 查询满足要求的总记录数
$pagecount=ceil($count/5);
$this->assign('pagecount',$pagecount);
视图：
  <div class="page">
  <for start='1' end='$pagecount+1' >
  <a href="{:U('index?p='.$i)}">{$i}</a>
  </for> 
  </div>




伪登录视图页面上代码：
<a href="javascript:void(0)"  onclick="alert('伪登录时只允许查看，请不要进行任何操作');
window.open('/Designer/autologin/?uid={$vo.id}&role=3')">伪登录</a>   （打开新页面）

<a href="{:U('Admindj/seller/edit',array('sid'=>$vo['id']))}" target="_self">编辑</a>（在本页面框架内打开）


视图  （视图标签中大部分是name属性不需要加$,value属性则需要加$，谨记谨记谨记）



视图中模板渲染的volist与foreach的使用区别：
<foreach name="list" item="vo">
{$vo.id}
{$vo.name}
</foreach>
Foreach标签相对比volist标签简洁，没有volist标签那么多的功能。
优势是可以对对象进行遍历输出，而volist标签通常是用于输出数组。


if判断
视图中条件判断状态改变：
<if condition = "$vo['status']">
       <a class="confirm ajax-get" href="{:U('Admindj/Help/help_status',array('cid'=>$vo['id'],'status'=>0))}" target="_self">禁用</a>
   <else />
       <a class="confirm ajax-get" href="{:U('Admindj/Help/help_status',array('cid'=>$vo['id'],'status'=>1))}" target="_self">启用</a>
</if>
<if>标签中的condition 中不能出现><或者=浩，必须用GT IT 或者EQ  


switch判断
<switch name="变量" >               //此处的变量名称不用加$或者{}，直接写上变量名称就行了
 <case value="值1" break="0或1">输出内容1</case>
 <case value="值2">输出内容2</case>
 <default />默认情况
 </switch>
实例：
<switch name="Think.get.userId|abs"> //此处的变量名称不用加$或者{}，直接写上变量名称就行了
    <case value="1" break="0">admin</case>
    <case value="2">admin</case>
    <default />default
 </switch>

<eq name="cate.id" value="$Think.get.cid">111<else />222</eq> 
上面标签就等于是$cate.id变量与$Think.get.cid变量的比较
$testst的值是1，
<eq name="testst" value="1">相等<else/>不相等</eq>，//输出结果是相等。
<gt name="testst" value="0">大于</gt>  //输出结果是大于.
三元计算：{$info['status']?$info['msg']:$info['error']};
实例：{$testst>0?"大于0":"小于0"}   //输出值是大于0
范围判断标签：<in name="id"value="1,2,3">输出内容1<else/>输出内容2</in>
实例：<in name="testst" value="1,2,3">在里面<else />不在里面</in>
Empty标签：<empty name="testst">空的吧<else />不是空的</empty> //输出结果为不是空的
Defined标签：判断常量是否已定义<defined name="NAME">NAME常量已经定义<else /> NAME常量未定义</defined>
实例：<defined name="testst">NAME常量已经定义<else />  //输出结果为：NAME常量未定义
视图使用PHP代码：<php>echo 'Hello,world!';</php>或者<?php echo 'Hello,world!'; ?>两个格式都可以。php标签或者php代码里面就不能再使用标签（包括普通标签和XML标签）了。

！！！



列表多选框代码：
视图代码：

<button class="btn ajax-post" target-form="ids" url="{:U('Model/setStatus',array('status'=>1))}">启 用</button>
<button class="btn ajax-post" target-form="ids" url="{:U('Model/setStatus',array('status'=>0))}">禁 用</button>

 <thead>
        <tr>
		<th class="row-selected row-selected"><input class="check-all" type="checkbox"/></th>
		<th class="">编号</th>
		<th class="">标识</th>
		<th class="">名称</th>
		<th class="">创建时间</th>
		<th class="">状态</th>
		<th class="">操作</th>
		</tr>
    </thead>
    <tbody>
	<notempty name="_list">
		<volist name="_list" id="vo">
		<tr>
            <td><input class="ids" type="checkbox" name="ids[]" value="{$vo.id}" /></td>


控制器代码：（无）


thinkphp上传文件：
视图页面代码：
<form action="__URL__/upload" enctype="multipart/form-data" method="post" >
<input type="text" name="name" />
<input type="file" name="photo" />
<input type="submit" value="提交" >
</form>

控制器代码：
public function upload(){
    $upload = new \Think\Upload();// 实例化上传类
    $upload->maxSize   =     3145728 ;// 设置附件上传大小
    $upload->exts      =     array('jpg', 'gif', 'png', 'jpeg');// 设置附件上传类型
    $upload->rootPath  =     './Uploads/'; // 设置附件上传根目录
    $upload->savePath  =     ''; // 设置附件上传（子）目录
    // 上传文件 
    $info   =   $upload->upload();
    if(!$info) {// 上传错误提示错误信息
        $this->error($upload->getError());
    }else{// 上传成功
      foreach($info as $file)
      {
        echo $file['savepath'].$file['savename'];//图片存储路径
       }
        $this->success('上传成功！');
    }
}


<INPUT class="checkbox" type="checkbox" name="ids[]" value="$audio[id]">
这个name="ids[]"有什么用？

------解决方案--------------------
ids[]=1;
ids[]=2;
传到php是个数组
$_POST[ids]=array(1,2); 
------解决方案--------------------
name="ids[]",这里是复选框 checkbox,
这里可以存储用户的id,一些批量操作,需要获取用户的id,比如批量删除,审核用户 等等
在php页面 $_POST['ids'],可以获得多个用户的id,进而进行相应的业务.
LZ可以把问题说的再详细点. 
------解决方案--------------------
$ids=$_POST['ids'];  


模型--》控制器--》视图：
模型代码：                              //模型中的方法中有数据交互的必须要写ReturnReturnReturnReturnReturnReturnReturn
<?php   
namespace Admin\Model;
use Think\Model;
class MessageModel extends Model {

	public function getData(){
         $Model=D('tel_message');
	 $data=$Model->field(true)->select();
	 if(empty($data)){
		 $this->error('获取--数据库--数据失败');
	 }
	 else{
	 return $data;
	 }

	}
}
 控制器代码：
<?php 
namespace Admin\Controller;
class MessageController extends AdminController {
    public function index(){
      
     $my=D('Message');
     $data=$my->getData();
     $this->assign('data',$data);
     $this->display();
    }
    
}

视图代码（主要的不多）：

<volist name="data" id="vo" offset="0" length="5" empty="暂时没有数据">
<tr>
<td><input class="ids" type="checkbox" name="ids[]" value="{$vo.id}" /></td>
<td>{$vo['tel']}</td>
<td>{$vo['message']} </td>
<td>{$vo['request']}</td>
<td>{$vo['ctime']}</td>
<td>{$vo['status']}</td>
</volist>



thinkphp内置字符串截取函数 msubstr();   效果会是这样-->姓名：张*****
{$vo.title|msubstr=0,10}    截取title前十个字符
msubstr($str, $start=0, $length, $charset=”utf-8″,
$suffix=true)
$str:要截取的字符串
$start=0：开始位置，默认从0开始
$length：截取长度
$charset=”utf-8″：字符编码，默认UTF－8
$suffix=true：是否在截取后的字符后面显示省略号，默认true显示，false为不显示msubstr($str, $start=0, $length, $charset=”utf-8″,
$suffix=true)
$str:要截取的字符串
$start=0：开始位置，默认从0开始
$length：截取长度
$charset=”utf-8″：字符编码，默认UTF－8
$suffix=true：是否在截取后的字符后面显示省略号，默认true显示，false为不显示


thinkphp 中模糊查询
http://www.jb51.net/article/56846.htm

notempty标签的使用：
<notempty name="list">
		<volist name="list" id="config">
					// 有值的话就输出
		</volist>
		<else/> // 没有值得话输出
		<td colspan="6" class="text-center"> aOh! 暂时还没有内容! </td>
</notempty>


1》》》》U方法
U方法用于完成对URL地址的组装，特点在于可以自动根据当前的URL模式和设置生成对应的URL地址，格式为：
U('地址','参数','伪静态','是否跳转','显示域名');
在模板中使用U方法而不是固定写死URL地址的好处在于，一旦你的环境变化或者参数设置改变，你不需要更改模板中的任何代码。
在模板中的调用格式需要采用 {:U('地址', '参数'…)} 的方式；
2》》》》I函数
养成使用I函数获取输入变量的好习惯；
3》》》》C方法
无论何种配置文件，定义了配置文件之后，都统一使用系统提供的C方法（可以借助Config单词来帮助记忆）来读取已有的配置。
获取已经设置的参数值：C('参数名称')
4》》》》M方法
thinkphp的M方法,意思就创建一个Model类

5》》》》
在Controller文件下创建TestController.class.php文件，内容为
<?php
namespace Admin\Controller;  //本类文件所在位置的上级目录,即TestController.class.php在Admin/Controller下面
class TestController extends AdminController {
	public function test()
	{
    $this->display();
        }
}
在View目录下创建Test/test.html,内容为
{:U{'Blog/read?id=1'}}
?>
6》》》》MVC传递变量

public function test()
        {
		$value="Bob";
		$this->assign('name',$value);
		$this->display();
	}
模板赋值通过在模板中设定值，视图页面用{$name}即可接收。
assign方法必须在display和show方法之前调用，并且系统只会输出设定的变量，
其它变量不会输出（系统变量例外），一定程度上保证了变量的安全性。
display方法
如果没有按照模板定义规则来定义模板文件（或者需要调用其他控制器下面的某个模板），可以使用：
// 指定模板输出
$this->display('edit'); 

7》》》》T方法
为了更方便的输出模板文件，新版封装了一个T函数用于生成模板文件名。
T函数的返回值是一个完整的模板文件名，可以直接用于display和fetch方法进行渲染输出。
T('Public/menu');
// 返回 当前模块/View/Public/menu.html
8》》》》show方法
如果你没有定义任何模板文件，或者把模板内容存储到数据库中的话，你就需要使用show方法来渲染输出了，show方法的调用格式：
show('渲染内容'[,'字符编码'][,'输出类型'])
例如，$this->show($content);
也可以指定编码和类型： $this->show($content, 'utf-8', 'text/xml');

9》》》》 wb强制以二进制方式写入
$file = fopen("/home/test/test.gif","wb");

10》》》》fputcvs()
fputcsv() 函数将行格式化为 CSV 并写入一个打开的文件中。
该函数返回写入字符串的长度。如果失败，则返回 FALSE。
<?php
$list = array
(
"Peter,Griffin,Oslo,Norway",
"Glenn,Quagmire,Oslo,Norway",
);
$file = fopen("contacts.csv","w");
foreach ($list as $line)
{
fputcsv($file,split(',',$line));
}
fclose($file); ?>
上面代码执行后，CSV 文件将如下所示：
Peter,Griffin,Oslo,Norway
Glenn,Quagmire,Oslo,Norway

++++thinkphp获得所有分类+++++
include("Common/Category.class.php");
$Category = new Category("ArticleCategory",array('id','pid','name','fullname'));
$categoryList = $Category->getList();

++++视图调用msubstr截取字符串+++++
调用方法：
{$vo.title|msubstr=5,5,'utf-8',false}   //后面的utf-8和false选填

++++++视图时间格式化+++++
调用方法：
{$vo.ctime|time_format='Y-m-d H:i'}
还有一种是：
{$time|date='Y-m-d',###}


+++elseif后面有一个/号，我擦+++++
<if condition="">
<elseif condition=""  />
<else />
</if>